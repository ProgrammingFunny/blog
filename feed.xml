<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逆水行舟</title>
    <description>Michael King&#39;s Blog</description>
    <link>http://loveshisong.cn/</link>
    <atom:link href="http://loveshisong.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 29 Jan 2016 17:02:42 +0800</pubDate>
    <lastBuildDate>Fri, 29 Jan 2016 17:02:42 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Hadoop项目框架</title>
        <description>&lt;p&gt;Hadoop相关项目的介绍&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/hadoop.png&quot; alt=&quot;Hadoop框架图&quot; title=&quot;Hadoop框架图&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;hadoop&quot;&gt;Hadoop&lt;/h2&gt;

&lt;p&gt;Hadoop是大数据的基础,它有4个模块 &lt;code class=&quot;prettyprint&quot;&gt;Hadoop Common&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;Hadoop Distributed File System (HDFS)&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;Hadoop YARN&lt;/code&gt;和 &lt;code class=&quot;prettyprint&quot;&gt;Hadoop MapReduce&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HDFS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;分布式文件系统, 适合存储大文件, 不适合小文件, 它的原理 &lt;a href=&quot;http://www.weixuehao.com/archives/596&quot;&gt;这篇文章&lt;/a&gt; 讲的比较详细&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YARN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YARN(Yet Another Resource Negotiator), 任务调度和集群的资源管理, Hadoop2.0提供的革命性功能, 可参考&lt;a href=&quot;http://www.ibm.com/developerworks/cn/data/library/bd-yarn-intro/index.html&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MapReduce&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MapReduce本身是谷歌推出的一个编程模型, 包括Map和Reduce两个过程.&lt;br&gt;
比如要计算1到10的平方和, 耗时较多的是计算平方, 加和耗时较少, 那么可以把整个过程这么拆分:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Map, 即把计算平方的任务分给10台机器,每台机器分别计算平方, 然后Map的结果就是一个可迭代的集合, 就是这10个数的平方;&lt;/li&gt;
&lt;li&gt;Reduce, 即把Map的结果迭代加和, 得到最终结果&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Hadoop MapReduce&lt;/code&gt;是&lt;code class=&quot;prettyprint&quot;&gt;MapReduce&lt;/code&gt;的一个实现, 2.0之后推出了基于&lt;code class=&quot;prettyprint&quot;&gt;YARN&lt;/code&gt;的&lt;code class=&quot;prettyprint&quot;&gt;Hadoop MapReduce&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;hbase&quot;&gt;HBase&lt;/h2&gt;

&lt;p&gt;非关系型数据库, 面向列存储, 理解成 Key-&amp;gt;Value 的存储更形象, 有行键(&lt;code class=&quot;prettyprint&quot;&gt;RowKey&lt;/code&gt;), 列族(&lt;code class=&quot;prettyprint&quot;&gt;Colum Family&lt;/code&gt;), 限定符(&lt;code class=&quot;prettyprint&quot;&gt;qualifier&lt;/code&gt;)等概念&lt;br&gt;
列名(Column)是由列族前缀和限定符(qualifier)连接而成, 如列族d有两个列(限定符):title和content, 则列名分别为&lt;code class=&quot;prettyprint&quot;&gt;d:title&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;d:content&lt;/code&gt;;&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;(row, column, version)&lt;/code&gt;唯一确定一个&lt;code class=&quot;prettyprint&quot;&gt;cell&lt;/code&gt;, 里面放着Value;&lt;br&gt;
更多内容参考&lt;a href=&quot;http://abloz.com/hbase/book.html#conceptual.view&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;hive&quot;&gt;Hive&lt;/h2&gt;

&lt;p&gt;是一个数据仓库工具, 可以将结构化的数据文件(hive文件,hbase)映射为一张数据库表, 然后通过SQL查询, 背后还是变成了MapReduce程序执行. 这种查询是秒级或分钟级的, 比较慢.&lt;/p&gt;

&lt;h2 id=&quot;pig&quot;&gt;Pig&lt;/h2&gt;

&lt;p&gt;和Hive类似, 有自己的查询语法&lt;/p&gt;

&lt;h2 id=&quot;sqoop&quot;&gt;Sqoop&lt;/h2&gt;

&lt;p&gt;一个ETL工具,可以进行数据同步, 比如把Oracle、Mysql等关系型数据库中的数据导入到HBase中、HDFS上, 也可把数据从HDFS或HBase导入到Mysql中&lt;/p&gt;

&lt;h2 id=&quot;flume&quot;&gt;Flume&lt;/h2&gt;

&lt;p&gt;日志收集工具&lt;/p&gt;

&lt;h2 id=&quot;zookeeper&quot;&gt;ZooKeeper&lt;/h2&gt;

&lt;p&gt;分布式协作服务, 好多地方都会用到, 比如写了个dubbo服务部署到5台机器上, 统一交给ZK进行管理, 使用者就不用关心到底调用哪台机器上的服务了&lt;/p&gt;

&lt;h2 id=&quot;spark&quot;&gt;Spark&lt;/h2&gt;

&lt;p&gt;这东西很火, 是一个内存计算的框架, 目前一个大的趋势. MapReduce会有很大的IO操作, 而Spark是在内存中计算, 所以很快&lt;/p&gt;

&lt;h2 id=&quot;mahout&quot;&gt;Mahout&lt;/h2&gt;

&lt;p&gt;一个数据挖掘和机器学习的库, 搞数据挖掘的用的比较多&lt;/p&gt;

&lt;h2 id=&quot;ambari&quot;&gt;Ambari&lt;/h2&gt;

&lt;p&gt;一个基于Web的管理平台,可以对集群进行统一的部署&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Thu, 14 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2016-01-14-Hadoop%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2016-01-14-Hadoop%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6.html</guid>
        
        <category>Hadoop</category>
        
        
        <category>点滴积累</category>
        
      </item>
    
      <item>
        <title>java中的反射</title>
        <description>&lt;p&gt;java反射总结&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;反射相关的类和接口简介&quot;&gt;反射相关的类和接口简介&lt;/h2&gt;

&lt;p&gt;在&lt;code class=&quot;prettyprint&quot;&gt;java.lang.reflect&lt;/code&gt;包中定义了一些接口和类,简单记录下他们的作用&lt;/p&gt;

&lt;h3 id=&quot;相关类说明&quot;&gt;相关类说明&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AccessibleObject&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;prettyprint&quot;&gt;Field、Method&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;Constructor&lt;/code&gt;对象的基类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Field&lt;/td&gt;
&lt;td&gt;final类, 对应类或接口的单个字段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;final类, 对应类或接口的单独某个方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;prettyprint&quot;&gt;Constructor&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;final类, 对应类的单个构造方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Modifier&lt;/td&gt;
&lt;td&gt;对应类和成员访问修饰符, 如&lt;code class=&quot;prettyprint&quot;&gt;public,static,final,native,synchronized&lt;/code&gt;等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;final类, 对应数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proxy&lt;/td&gt;
&lt;td&gt;提供用于创建动态代理类和实例的静态方法，它还是由这些方法创建的所有动态代理类的超类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ReflectPermission&lt;/td&gt;
&lt;td&gt;final类, 反射操作的&lt;code class=&quot;prettyprint&quot;&gt;Permission&lt;/code&gt;类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;另外反射机制还经常用到&lt;code class=&quot;prettyprint&quot;&gt;java.lang&lt;/code&gt;中的类, 如&lt;code class=&quot;prettyprint&quot;&gt;Class&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;Packate&lt;/code&gt;还有各种原始类型等&lt;/p&gt;

&lt;h3 id=&quot;相关接口继承关系图&quot;&gt;相关接口继承关系图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/reflect_interface.png&quot; alt=&quot;反射相关接口继承关系图&quot; title=&quot;反射相关接口继承关系图&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;相关接口说明&quot;&gt;相关接口说明&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;接口&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AnnotatedElement&lt;/td&gt;
&lt;td&gt;被注解标注的元素都实现的接口&lt;br&gt; 实现类有&lt;code class=&quot;prettyprint&quot;&gt;AccessibleObject&lt;/code&gt;及其子类,&lt;code class=&quot;prettyprint&quot;&gt;Class&lt;/code&gt;&lt;code class=&quot;prettyprint&quot;&gt;Package&lt;/code&gt;&lt;br&gt; 有&lt;code class=&quot;prettyprint&quot;&gt;是否有注解&lt;/code&gt;,&lt;code class=&quot;prettyprint&quot;&gt;获取所有注解&lt;/code&gt;等方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Member&lt;/td&gt;
&lt;td&gt;成员接口, 反映字段、方法、构造函数的信息&lt;br&gt; 实现类有&lt;code class=&quot;prettyprint&quot;&gt;AccessibleObject&lt;/code&gt;的子类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Type&lt;/td&gt;
&lt;td&gt;所有类型的父接口, 如原始类型、参数化类型、数组类型、类型变量和基本(原生)类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GenericDeclaration&lt;/td&gt;
&lt;td&gt;各种声明类型的父接口, 如&lt;code class=&quot;prettyprint&quot;&gt;Class,Constructor,Method&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;prettyprint&quot;&gt;TypeVariable&amp;lt;D extends GenericDeclaration&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;各种类型变量的父接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ParameterizedType&lt;/td&gt;
&lt;td&gt;参数化类型, 如&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GenericArrayType&lt;/td&gt;
&lt;td&gt;数组类型, 它里面的元素为参数化类型或类型变量(上面那俩)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WildcardType&lt;/td&gt;
&lt;td&gt;通配符类型, 如&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;?&amp;gt;, &amp;lt;? extends Number&amp;gt;, &amp;lt;? super Integer&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;InvocationHandler&lt;/td&gt;
&lt;td&gt;代理实例的调用处理程序需要实现该接口&lt;br&gt; &lt;code class=&quot;prettyprint&quot;&gt;Proxy&lt;/code&gt;是代理实例,它的处理程序需要实现该接口的&lt;code class=&quot;prettyprint&quot;&gt;invoke&lt;/code&gt;方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;hr&gt;

&lt;h2 id=&quot;object,-class和type的关系和区别&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;Object&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;Class&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;Type&lt;/code&gt;的关系和区别&lt;/h2&gt;

&lt;p&gt;所有的类都继承&lt;code class=&quot;prettyprint&quot;&gt;Object&lt;/code&gt;是毫无疑问的, &lt;code class=&quot;prettyprint&quot;&gt;Class&lt;/code&gt;也是类，也继承&lt;code class=&quot;prettyprint&quot;&gt;Object&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;Class&lt;/code&gt;类特殊的地方是它在运行时用来描述类的各种元信息,对象是类的实例,而类在运行时的描述就是&lt;code class=&quot;prettyprint&quot;&gt;Class&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;Type&lt;/code&gt;是个接口,用来表示某个对象是什么类型的,&lt;code class=&quot;prettyprint&quot;&gt;Class&lt;/code&gt;类实现了好几个接口,其中一个就是&lt;code class=&quot;prettyprint&quot;&gt;Type&lt;/code&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;反射的具体功能&quot;&gt;反射的具体功能&lt;/h2&gt;

&lt;p&gt;反射作用挺多, 比如反编译, 通过反射机制访问对象的属性、方法、构造方法等&lt;/p&gt;

&lt;h3 id=&quot;获取类&quot;&gt;获取类&lt;/h3&gt;

&lt;p&gt;有如下三种方法:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;通过&lt;code class=&quot;prettyprint&quot;&gt;Class.forName()&lt;/code&gt;, 如:&lt;code class=&quot;prettyprint&quot;&gt;Class clazz = Class.forName(&amp;quot;java.lang.String&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过类的&lt;code class=&quot;prettyprint&quot;&gt;class&lt;/code&gt;属性, 如:&lt;code class=&quot;prettyprint&quot;&gt;Class clazz = String.class;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过实例对象的&lt;code class=&quot;prettyprint&quot;&gt;getClass&lt;/code&gt;方法, 如: &lt;code class=&quot;prettyprint&quot;&gt;Class clazz = user.getClass();&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;获取对象实例&quot;&gt;获取对象实例&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;通过&lt;code class=&quot;prettyprint&quot;&gt;Class&lt;/code&gt;实例的&lt;code class=&quot;prettyprint&quot;&gt;newInstance()&lt;/code&gt;, 如:&lt;code class=&quot;prettyprint&quot;&gt;String str = (String)clazz.newInstance();&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;获取构造方法&quot;&gt;获取构造方法&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Constructor&amp;lt;?&amp;gt;[] getConstructors()&lt;/code&gt;: 获取本类中所有public构造器&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Constructor&amp;lt;T&amp;gt; getConstructor(Class&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;: 获取本类中特定参数的public构造器&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Constructor&amp;lt;?&amp;gt;[] getDeclaredConstructors()&lt;/code&gt;: 获取本类中所有构造器&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Constructor&amp;lt;T&amp;gt; getDeclaredConstructor(Class&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;: 获取本类中指定参数的构造器&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;获取类方法&quot;&gt;获取类方法&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Method[] getMethods()&lt;/code&gt;: 获取本类或父类中所有public方法(包括构造器方法)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Method getMethod(String name, Class&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;: 获取本类或父类中特定名字和参数的public方法&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Method[] getDeclaredMethods()&lt;/code&gt;: 获取本类中声明的所有方法(包括非public但不包括继承来的)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Method getDeclaredMethod(String name, Class&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;: 获取本类中声明的特定名字和参数的方法(最常用)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;获取类属性&quot;&gt;获取类属性&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Field[] getFields()&lt;/code&gt;: 获取本类或父类中所有public属性&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Field getField(String name)&lt;/code&gt;: 获取本类或父类中特定名字的public属性&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Field[] getDeclaredFields()&lt;/code&gt;: 获取本类中声明的所有属性&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Field getDeclaredField(String name)&lt;/code&gt;: 获取本类中声明的特定名字的属性&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h2 id=&quot;通过反射实现方法动态调用的例子&quot;&gt;通过反射实现方法动态调用的例子&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;setName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getNameMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;getName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getNameMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Thu, 14 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-01-14-java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-01-14-java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>SpringMVC之Controller控制器</title>
        <description>&lt;p&gt;SpringMVC中,每一个URL请求是通过&lt;code class=&quot;prettyprint&quot;&gt;DispatcherServlet&lt;/code&gt;负责转发给相应的&lt;code class=&quot;prettyprint&quot;&gt;Handler&lt;/code&gt;的,
处理器&lt;code class=&quot;prettyprint&quot;&gt;Handler&lt;/code&gt;是基于&lt;code class=&quot;prettyprint&quot;&gt;@Controller&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping&lt;/code&gt;这两个注解的,
&lt;code class=&quot;prettyprint&quot;&gt;@Controller&lt;/code&gt;声明一个处理器类，&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping&lt;/code&gt;声明对应请求的映射关系&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;简单url映射规则&quot;&gt;简单URL映射规则&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping&lt;/code&gt;可以标记在类上,也可以标记在方法上,通过例子说明(假设拦截&lt;code class=&quot;prettyprint&quot;&gt;*.do&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 若类`TestController`上没有`@RequestMapping`注解, 则访问`/index1.do`即可调用`index1`方法&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/index1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// index后面加不加.do都可以,即这里写`/index1`等同于`/index1.do`&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// 这个注解是为了不经过`ModelAndView`直接返回字符串&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 这些参数在返回篇里面说&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;index1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/*/index2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 支持通配符, 如`/test/abc/index2.do`,但`/test/index2.do`不能访问&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;index2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;@requestmapping&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping&lt;/code&gt;还有很多高级应用, 它有如下属性:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;value : url映射路径,如&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping({&amp;quot;/index1&amp;quot;})&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping({&amp;quot;/index2&amp;quot;, &amp;quot;/index3&amp;quot;})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;path : 同value&lt;/li&gt;
&lt;li&gt;method : 指定请求的类型,如&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping(method = {RequestMethod.GET})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;params : 指定请求中必须包含某些参数值时，才让该方法处理&lt;/li&gt;
&lt;li&gt;headers : 指定请求中必须包含某些指定的header值，才能让该方法处理请求&lt;/li&gt;
&lt;li&gt;consumes : 指定处理请求的提交内容类型(Content-Type),例如application/json, text/html&lt;/li&gt;
&lt;li&gt;produces : 指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 请求参数中必须包含`key1`和`key2`两个参数才会执行该方法, 如`/index1.do?key1=1&amp;amp;key2=2`&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/index1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;key1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;key2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;index1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 请求参数中必须包含参数`key`且值必须为`value`才会执行该方法, 如`/index2.do?key=value`&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/index2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;key=value&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;index2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 请求头中`Accept`必须包含`text/html`才会执行该方法&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/index3&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Accept=text/html&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;index3&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 该方法仅处理请求中Content-Type为`application/json`类型的请求&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/index4&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;index4&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 该方法仅处理请求中Accept包含`text/html`的请求,同时暗示了返回的内容类型为`text/html`&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/index5&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text/html;charset=UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;index5&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;@pathvariable&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;@PathVariable&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;在&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping&lt;/code&gt;注解标注的方法上可以使用URI模板&lt;br&gt;
URI模板就是在URI中给定一个变量, 然后在映射的时候动态的给该变量赋值, 通过注解&lt;code class=&quot;prettyprint&quot;&gt;@PathVariable&lt;/code&gt;获取URI模板中的值&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//@RequestMapping(value = &amp;quot;/{testName}&amp;quot;)  // 类上的模板变量可以赋值给所有成员方法的参数&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// URI: `/index1/id5.do`, 则 id = id5&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/index1/{indexId}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;indexId&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 可以指定取自哪个URI模板变量, 不指定则默认找跟参数名相同的变量, 最好都指定&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 支持正则, 如 URI: `/index2/test-10.do`, 则 indexName=test, v=10&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/index2/{indexName:[a-z]+}-{version:[\d]+}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 简单类型Spring直接转, 复杂类型后面说怎么转&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;@requestparam&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;@RequestParam&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@RequestParam&lt;/code&gt;可以绑定&lt;code class=&quot;prettyprint&quot;&gt;HttpServletRequest&lt;/code&gt;请求参数到Controller的方法参数&lt;br&gt;
它有几个属性:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;value : 绑定的请求中的参数名字&lt;/li&gt;
&lt;li&gt;name : 同value&lt;/li&gt;
&lt;li&gt;required : 是否必传, 默认为&lt;code class=&quot;prettyprint&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;defaultValue : 默认值, 不传时相当于默认传了该值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// URI: `/index1.do?id=5`, 则 id = 5&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/index1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 默认绑定同名参数&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;@cookievalue&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;@CookieValue&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@CookieValue&lt;/code&gt;可以绑定 cookie 的值到Controller的方法参数, 它的属性和用法同&lt;code class=&quot;prettyprint&quot;&gt;RequestParam&lt;/code&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;@requestheader&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;@RequestHeader&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@RequestHeader&lt;/code&gt;可以绑定&lt;code class=&quot;prettyprint&quot;&gt;HttpServletRequest&lt;/code&gt;头信息到Controller的方法参数, 属性和用法同&lt;code class=&quot;prettyprint&quot;&gt;RequestParam&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/index&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestHeader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@RequestHeader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 两个值是一样的, 即RequestHeader是大小写不敏感的, 这是与RequestParam的不同&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;@modelattribute和@sessionattributes&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;@ModelAttribute&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;@SessionAttributes&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;@ModelAttribute&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;@SessionAttributes&lt;/code&gt;可在不同的模型和控制器之间共享数据&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;@ModelAttribute&lt;/code&gt;主要有两种使用方式，一种是标注在方法上，一种是标注在Controller的方法参数上:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;标注在方法上时,该方法将在处理器方法(即有&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping&lt;/code&gt;注解的方法)执行之前执行,
然后把返回的对象存放在session或模型属性中,属性名可以使用&lt;code class=&quot;prettyprint&quot;&gt;@ModelAttribute(&amp;quot;attributeName&amp;quot;)&lt;/code&gt; 在指定,
若未指定,则用返回类型的类名(首字母小写)作为属性名称&lt;br&gt;&lt;/li&gt;
&lt;li&gt;标注在Controller的方法参数上时, 即将属性值从session或模型属性中取出来注入到参数中去&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;@SessionAttributes&lt;/code&gt;一般是标记在Controller类上,用来从Session中存取数据, 可以通过&lt;code class=&quot;prettyprint&quot;&gt;value(names)&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;types&lt;/code&gt;属性来指定哪些是需要存放在session中的:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;value&lt;/code&gt;或&lt;code class=&quot;prettyprint&quot;&gt;names&lt;/code&gt;属性的时候, 使用的Session属性名称应为对应的名称&lt;/li&gt;
&lt;li&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;types&lt;/code&gt;属性的时候,则使用的Session属性名称为对应类型的名称(首字母小写)&lt;/li&gt;
&lt;li&gt;当&lt;code class=&quot;prettyprint&quot;&gt;value&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;types&lt;/code&gt;两个属性同时使用时,取的是它们的 &lt;em&gt;并集&lt;/em&gt;, 而不是交集&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如何使用看下面例子&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// OneController没有使用`@SessionAttributes`标注, 属性值存放在模型属性中&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OneController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ModelAttribute标注的方法，每次请求控制器方法时都会执行&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;不设置属性名则默认为string&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;属性名为name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/one&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;请求／one.do时, 该控制器方法执行之前,上面那两个方法就已经执行了&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Enumeration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttributeNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 这里什么也没输出&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// TwoController使用`@SessionAttributes`标注, 某些属性值存放在session中&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SessionAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TwoController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 通过names注入到session, 属性名为v1&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;model:v1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 通过types保存到session, 属性名为s1&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;string1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;model:s1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;s1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 通过types保存到session, 属性名为默认的string&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;string2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;model:s2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 只能保存到模型属性中, 属性名为默认的date, 每次仍会执行&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;date1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;model:d1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/two&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Enumeration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttributeNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;session:&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于&lt;code class=&quot;prettyprint&quot;&gt;TwoController&lt;/code&gt;的输出结果有必要说明下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 第一遍请求/two.do输出的结果:&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 第二遍请求/two.do输出的结果:&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;session:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;session:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;session:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一遍请求时session中还没有属性，请求完建立session之后才有值&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;自定义参数类型转换&quot;&gt;自定义参数类型转换&lt;/h2&gt;

&lt;p&gt;处理器方法参数接收请求参数绑定数据的时候,对于一些简单的数据类型Spring会帮我们自动进行类型转换,而对于一些复杂的类型想要在接受参数时自动转换就必须向Spring注册一个对特定类型的识别转换器&lt;br&gt;
Spring允许我们提供两种类型的识别转换器，一种是注册在Controller中的，一种是注册在SpringMVC的配置中;&lt;br&gt;
定义在Controller中的是局部的，只在当前Controller中有效，而放在SpringMVC配置文件中的是全局的，所有Controller都可以拿来使用。&lt;/p&gt;

&lt;p&gt;每一个使用&lt;code class=&quot;prettyprint&quot;&gt;@RequestParam&lt;/code&gt;,&lt;code class=&quot;prettyprint&quot;&gt;@PathVariable&lt;/code&gt;&lt;code class=&quot;prettyprint&quot;&gt;@RequestHeader&lt;/code&gt;&lt;code class=&quot;prettyprint&quot;&gt;@CookieValue&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;@ModelAttribute&lt;/code&gt;标记的参数绑定时都会触发&lt;code class=&quot;prettyprint&quot;&gt;initBinder&lt;/code&gt;方法的执行,包括全局和局部的(局部只包括当前类中有效的), 注意是每一个,即每次请求，有几个注解参数就会触发几次&lt;/p&gt;

&lt;h3 id=&quot;使用@initbinder注解定义局部的类型转换器&quot;&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@InitBinder&lt;/code&gt;注解定义局部的类型转换器&lt;/h3&gt;

&lt;p&gt;在控制器里定义一个用&lt;code class=&quot;prettyprint&quot;&gt;@InitBinder&lt;/code&gt;注解的方法并声明一个&lt;code class=&quot;prettyprint&quot;&gt;WebDataBinder&lt;/code&gt;参数, 当Controller在处理请求方法时,若发现有不能解析的对象, 就会看该类中是否有用&lt;code class=&quot;prettyprint&quot;&gt;@InitBinder&lt;/code&gt;标记的方法, 如果有就会执行该方法, 然后看里面定义的类型转换器是否与当前需要的类型匹配.如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@InitBinder&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataBinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebDataBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DateFormat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;yyyyMMdd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PropertyEditor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyEditor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomDateEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 第二个参数表示是否允许为空&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerCustomEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test/{date}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// URI: /test/20151218.do&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 输出: 1450368000000&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类型转换器是通过&lt;code class=&quot;prettyprint&quot;&gt;WebDataBinder&lt;/code&gt;对象的&lt;code class=&quot;prettyprint&quot;&gt;registerCustomEditor&lt;/code&gt;方法来注册的,要实现自己的类型转换器就要实现自己的&lt;code class=&quot;prettyprint&quot;&gt;PropertyEditor&lt;/code&gt; 对象. Spring已经提供了一些常用的属性编辑器,如&lt;code class=&quot;prettyprint&quot;&gt;CustomDateEditor&lt;/code&gt;,&lt;code class=&quot;prettyprint&quot;&gt;CustomBooleanEditor&lt;/code&gt;等&lt;/p&gt;

&lt;h3 id=&quot;propertyeditor属性编辑器&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;PropertyEditor&lt;/code&gt;属性编辑器&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;PropertyEditor&lt;/code&gt;是JDK的接口,它有个实现类:&lt;code class=&quot;prettyprint&quot;&gt;PropertyEditorSupport&lt;/code&gt;,所以要实现自己的&lt;code class=&quot;prettyprint&quot;&gt;PropertyEditor&lt;/code&gt;时只需继承&lt;code class=&quot;prettyprint&quot;&gt;PropertyEditorSupport&lt;/code&gt;类, 然后重写其中的一些方法即可,一般重写&lt;code class=&quot;prettyprint&quot;&gt;setAsText&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;getAsText&lt;/code&gt;方法就可以了.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;setAsText&lt;/code&gt;方法用于把字符串类型的值转换为对应的对象,一般先把字符串类型的对象转为特定的对象，然后利用&lt;code class=&quot;prettyprint&quot;&gt;PropertyEditor&lt;/code&gt;的&lt;code class=&quot;prettyprint&quot;&gt;setValue&lt;/code&gt;方法设定转换后的值.&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;getAsText&lt;/code&gt;方法用于把对象当做字符串来返回,一般先使用&lt;code class=&quot;prettyprint&quot;&gt;getValue&lt;/code&gt;方法获取当前的对象, 然后把它转换为字符串后再返回给&lt;code class=&quot;prettyprint&quot;&gt;getAsText&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@InitBinder&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataBinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebDataBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 定义一个 User 属性编辑器&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PropertyEditor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userEditor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PropertyEditorSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalArgumentException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 先转成User对象&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// 在用setValue设置转换后的值&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 先获取当前对象&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// 再返回对象的字符串形式&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 使用 WebDataBinder 注册 User 类型的属性编辑器&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerCustomEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;实现webbindinginitializer接口定义全局的类型转换器&quot;&gt;实现&lt;code class=&quot;prettyprint&quot;&gt;WebBindingInitializer&lt;/code&gt;接口定义全局的类型转换器&lt;/h3&gt;

&lt;p&gt;定义全局的类型转换器需要实现自己的&lt;code class=&quot;prettyprint&quot;&gt;WebBindingInitializer&lt;/code&gt;对象,然后把该对象注入到&lt;code class=&quot;prettyprint&quot;&gt;RequestMappingHandlerAdapter&lt;/code&gt;中,这样Spring在遇到自己不能解析的对象的时候就会到全局的&lt;code class=&quot;prettyprint&quot;&gt;WebBindingInitializer&lt;/code&gt;的&lt;code class=&quot;prettyprint&quot;&gt;initBinder&lt;/code&gt;方法中去找,每次遇到不认识的对象时,&lt;code class=&quot;prettyprint&quot;&gt;initBinder&lt;/code&gt;方法都会被执行一遍.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMappingHandlerAdapter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestMappingHandlerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RequestMappingHandlerAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestMappingHandlerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 匿名内部类定义自己的WebBindingInitializer, 并注入到RequestMappingHandlerAdapter中&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWebBindingInitializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WebBindingInitializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initBinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebDataBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;DateFormat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;yyyyMMdd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;PropertyEditor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyEditor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomDateEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerCustomEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;控制器方法支持的方法参数&quot;&gt;控制器方法支持的方法参数&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping&lt;/code&gt;标记的控制器方法,传入spring会自动帮我们赋值，我们直接在方法上声明参数即可。&lt;br&gt;
方法的传入参数归纳如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HttpServlet对象: 包括&lt;code class=&quot;prettyprint&quot;&gt;HttpServletRequest&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;HttpServletResponse&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;HttpSession&lt;/code&gt;对象.  使用&lt;code class=&quot;prettyprint&quot;&gt;HttpSession&lt;/code&gt;时如果此时session还没建立起来就会有问题&lt;/li&gt;
&lt;li&gt;Spring自己的&lt;code class=&quot;prettyprint&quot;&gt;WebRequest&lt;/code&gt;对象: 该对象可以访问到存放在HttpServletRequest和HttpSession中的属性值&lt;/li&gt;
&lt;li&gt;流对象: 包括&lt;code class=&quot;prettyprint&quot;&gt;InputStream&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;OutputStream&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;Reader&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;Writer&lt;/code&gt;.&lt;code class=&quot;prettyprint&quot;&gt;InputStream&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;Reader&lt;/code&gt;是针对HttpServletRequest 而言的,可以从里面取数据; &lt;code class=&quot;prettyprint&quot;&gt;OutputStream&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;Writer&lt;/code&gt;是针对HttpServletResponse而言的,可以往里面写数据,如下列子:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/index&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//  直接向客户端输出内容&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\r&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;哈哈&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\r&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@PathVariable&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;@RequestParam&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;@CookieValue&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;@RequestHeader&lt;/code&gt;标记的参数&lt;/li&gt;
&lt;li&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@ModelAttribute&lt;/code&gt;标记的参数: 取模型属性相当于&lt;code class=&quot;prettyprint&quot;&gt;request.getAttribute(&amp;quot;key&amp;quot;)&lt;/code&gt;;  使用&lt;code class=&quot;prettyprint&quot;&gt;@SessionAttributes&lt;/code&gt;注解控制器之后,从session中取数据相当于&lt;code class=&quot;prettyprint&quot;&gt;session.getAttribute(&amp;quot;key&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;Model&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;ModelMap&lt;/code&gt;: 这些都可以用来封装模型数据,用来给视图做展示.&lt;/li&gt;
&lt;li&gt;实体类: 可以用来接收上传的参数&lt;/li&gt;
&lt;li&gt;Spring封装的&lt;code class=&quot;prettyprint&quot;&gt;MultipartFile&lt;/code&gt;: 用来接收上传文件&lt;/li&gt;
&lt;li&gt;Spring封装的&lt;code class=&quot;prettyprint&quot;&gt;Errors&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;BindingResult&lt;/code&gt;对象: 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;返回值的类型&quot;&gt;返回值的类型&lt;/h2&gt;

&lt;p&gt;处理器中&lt;code class=&quot;prettyprint&quot;&gt;@RequestMapping&lt;/code&gt;标记的处理器方法的返回值也有不同情况，大部分情况是返回一个&lt;code class=&quot;prettyprint&quot;&gt;ModelAndView&lt;/code&gt;, 这个过程中发挥作用的就是&lt;code class=&quot;prettyprint&quot;&gt;ViewResolver&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;View&lt;/code&gt;.
有下面这些情况:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;返回&lt;code class=&quot;prettyprint&quot;&gt;ModelAndView&lt;/code&gt;对象: 包含模型和视图,模型是map的形式,可以通过&lt;code class=&quot;prettyprint&quot;&gt;request.getAttribute(&amp;quot;key&amp;quot;)&lt;/code&gt;取值;视图是字符串形式,表示视图的名字&lt;/li&gt;
&lt;li&gt;返回模型: 包括&lt;code class=&quot;prettyprint&quot;&gt;Map&lt;/code&gt;, Spring的&lt;code class=&quot;prettyprint&quot;&gt;Model&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;ModelMap&lt;/code&gt;, 视图名称将由&lt;code class=&quot;prettyprint&quot;&gt;RequestToViewNameTranslator&lt;/code&gt;决定&lt;/li&gt;
&lt;li&gt;返回视图对象&lt;code class=&quot;prettyprint&quot;&gt;View&lt;/code&gt;: 这种情况可以给处理器方法传入一个模型参数,比如上面传入的那个Map,可在方法体里面往模型中添加值,相当于&lt;code class=&quot;prettyprint&quot;&gt;setAttribute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回字符串&lt;code class=&quot;prettyprint&quot;&gt;String&lt;/code&gt;: 这往往代表的是一个视图名称, 如果需要模型的话,跟上面一样,传入一个模型参数即可&lt;/li&gt;
&lt;li&gt;返回&lt;code class=&quot;prettyprint&quot;&gt;void&lt;/code&gt;: 这种情况一般是我们直接把返回结果写到&lt;code class=&quot;prettyprint&quot;&gt;HttpServletResponse&lt;/code&gt;中了,比如上面的&lt;code class=&quot;prettyprint&quot;&gt;Writer&lt;/code&gt;那样;  如果没有写,则会利用&lt;code class=&quot;prettyprint&quot;&gt;RequestToViewNameTranslator&lt;/code&gt;来返回一个对应的视图名称&lt;/li&gt;
&lt;li&gt;处理器方法被&lt;code class=&quot;prettyprint&quot;&gt;@ResponseBody&lt;/code&gt;标记: 被标记的方法任何返回值都不会像上面那样当作视图或模型来处理, 而是通过&lt;code class=&quot;prettyprint&quot;&gt;HttpMessageConverters&lt;/code&gt;转换之后写到&lt;code class=&quot;prettyprint&quot;&gt;HttpServletResponse&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;除了上面情况之外的其它任何返回类型都会被当做模型中的一个属性来处理,属性名称可在该方法上用&lt;code class=&quot;prettyprint&quot;&gt;@ModelAttribute(&amp;quot;attributeName&amp;quot;)&lt;/code&gt; 来定义, 否则将使用返回类型的类名称的首字母小写形式来表示; 返回的视图还是由&lt;code class=&quot;prettyprint&quot;&gt;RequestToViewNameTranslator&lt;/code&gt;来决定.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Fri, 25 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-12-25-SpringMVC%E4%B9%8BController%E6%8E%A7%E5%88%B6%E5%99%A8.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-12-25-SpringMVC%E4%B9%8BController%E6%8E%A7%E5%88%B6%E5%99%A8.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>linux命令积累</title>
        <description>&lt;p&gt;记录一些常用的linux shell命令, 做个备忘&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;链接命令-ln&quot;&gt;链接命令 &lt;em&gt;ln&lt;/em&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;软链接: 可链接目录、可跨文件系统、相当于快捷方式&lt;/li&gt;
&lt;li&gt;硬链接: 文件副本、不占空间、不可链接目录、不可跨文件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;软链接: ln -s src_name link_name
硬链接: ln file_name link_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;打包命令-tar&quot;&gt;打包命令 &lt;em&gt;tar&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;常用参数:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-c: 创建&lt;/li&gt;
&lt;li&gt;-x: 解压&lt;/li&gt;
&lt;li&gt;-f: 指定文件&lt;/li&gt;
&lt;li&gt;-v: 显示进度&lt;/li&gt;
&lt;li&gt;-t: 显示列表&lt;/li&gt;
&lt;li&gt;-z: 使用gzip压缩&lt;/li&gt;
&lt;li&gt;-j: 使用bzip2压缩&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常用示例:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;打包: tar -cvf output.tar inpt1 input2 ...
压缩: tar -zcvf output.tar directory/input
解压: tar -xvf input.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;远程拷贝-scp&quot;&gt;远程拷贝 &lt;em&gt;scp&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;常用参数:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-r: 递归拷贝，若文件夹下有文件，则底下文件也一起拷贝&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常用示例:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;上传: scp -r local_file username@remote_ip:remote_file
下载: scp -r username@ip:remote_file local_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;修改权限-chmod&quot;&gt;修改权限 &lt;em&gt;chmod&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;递归修改权限，比如，将某目录下面的所有文件修改为644，所有目录修改为755&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;find ./mydir -type f | xargs chmod 644
find ./mydir -type d | xargs chmod 755
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Tue, 15 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2015-12-15-linux%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2015-12-15-linux%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF.html</guid>
        
        <category>linux</category>
        
        
        <category>点滴积累</category>
        
      </item>
    
      <item>
        <title>Spring的AOP</title>
        <description>&lt;p&gt;在Spring中使用AOP的详细资料可以查看&lt;a href=&quot;http://shouce.jb51.net/spring/aop.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;aop的实现方式&quot;&gt;AOP的实现方式&lt;/h2&gt;

&lt;p&gt;在Java中,从织入切面的方式上来看,存在三种织入方式:编译时织入、加载时织入和运行时织入&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;编译时织入(Compile Time Weaving, CTW)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指在Java编译期,采用特殊的编译器, 将切面织入到Java类中,即发生在从java文件到class文件的过程.&lt;br&gt;
这种方式将切面直接编译进了字节码，所以运行时不再需要动态创建代理对象, 节约了内存和CPU, 但编译过程复杂(可借助Maven AspectJ插件)，编写aspect文件(.aj文件)复杂&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加载时织入(Load Time Weaving, LTW)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指通过特殊的类加载器(如AspectJ compiler), 在JVM载入字节码文件时, 织入切面, 即发生在class文件加载的过程.&lt;br&gt;
具体可参考&lt;a href=&quot;http://shouce.jb51.net/spring/aop.html#aop-aj-ltw&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;运行时织入&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;采用CGLib工具或JDK动态代理进行切面的织入, 如Spring AOP&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;aop、cglib、spring-aop、aspectj之间的关系&quot;&gt;AOP、CGLib、Spring AOP、AspectJ之间的关系&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;AOP, Aspect Oriented Programming, 面向切面编程,是个概念, 类似于面向对象编程(OOP)一样&lt;/li&gt;
&lt;li&gt;CGLib, 基于&lt;code class=&quot;prettyprint&quot;&gt;asm.jar&lt;/code&gt;的字节码增强技术API, 开源的, 也是个jar包:&lt;code class=&quot;prettyprint&quot;&gt;cglib.jar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Spring AOP, Spring的AOP实现, 在运行时基于动态代理(JDK或cglib)的方式进行织入, Spring3.2以后不再需要依赖&lt;code class=&quot;prettyprint&quot;&gt;cglib.jar&lt;/code&gt;包, 因为它里面的类已经被&lt;code class=&quot;prettyprint&quot;&gt;spring-core.jar&lt;/code&gt;包含了&lt;/li&gt;
&lt;li&gt;AspectJ, 提供了完整的AOP实现

&lt;ol&gt;
&lt;li&gt;AspectJ是一个代码生成工具,于自己的语法编译工具，编译的结果是Java Class文件, 支持编译时织入切面，即所谓的CTW机制&lt;/li&gt;
&lt;li&gt;AspectJ有自己的类装载器，支持在类装载时织入切面，即所谓的LTW机制&lt;/li&gt;
&lt;li&gt;AspectJ同样也支持运行时织入，运行时织入是基于动态代理的(默认机制)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;spring中aop相关的概念&quot;&gt;Spring中AOP相关的概念&lt;/h2&gt;

&lt;p&gt;在怎么使用之前,最好先看看相关概念,有关&lt;code class=&quot;prettyprint&quot;&gt;Joinpoint&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;Pointcut&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;Advice&lt;/code&gt;等概念,看&lt;a href=&quot;http://shouce.jb51.net/spring/aop.html#aop-introduction-defn&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;启用@aspectj支持&quot;&gt;启用@AspectJ支持&lt;/h2&gt;

&lt;p&gt;在Spring中使用&lt;code class=&quot;prettyprint&quot;&gt;@AspectJ&lt;/code&gt;可以在配置文件中启用&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;aop:aspectj-autoproxy/&amp;gt;&lt;/code&gt;, 甚至启用LTW机制&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;context:load-time-weaver/&amp;gt;&lt;/code&gt;, 对应的注解分别为&lt;code class=&quot;prettyprint&quot;&gt;@EnableAspectJAutoProxy&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;@EnableLoadTimeWeaving&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;声明一个切面&quot;&gt;声明一个切面&lt;/h2&gt;

&lt;p&gt;在带有&lt;code class=&quot;prettyprint&quot;&gt;@AspectJ&lt;/code&gt;注解的类上同时加上&lt;code class=&quot;prettyprint&quot;&gt;@Component&lt;/code&gt;(声明为一个bean)注解并确保被自动扫描, 这样才会被Spring识别并管理&lt;/p&gt;

&lt;h2 id=&quot;声明一个切入点&quot;&gt;声明一个切入点&lt;/h2&gt;

&lt;p&gt;切入点决定了连接点关注的内容，使得我们可以控制通知什么时候执行, 即从哪里把要做的操作(通知)切入进去&lt;br&gt;
一个切入点声明有两个部分: &lt;em&gt;切入点签名&lt;/em&gt; 和 &lt;em&gt;切入点表达式&lt;/em&gt;&lt;br&gt;
在&lt;code class=&quot;prettyprint&quot;&gt;@AspectJ&lt;/code&gt;注解风格的AOP中, &lt;em&gt;切入点签名&lt;/em&gt; 通过一个普通的方法定义来提供, 该方法必需反回&lt;code class=&quot;prettyprint&quot;&gt;void&lt;/code&gt;类型;&lt;br&gt;
&lt;em&gt;切入点表达式&lt;/em&gt; 使用&lt;code class=&quot;prettyprint&quot;&gt;@Pointcut&lt;/code&gt;注解来表示(内容略多, 后面讲), 一个切入点声明如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;execution(* sayAdvisorBefore(..)) &amp;amp;&amp;amp; args(param)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;param&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pointcutName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;value: 指定切入点表达式, 如&lt;code class=&quot;prettyprint&quot;&gt;execution&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;args&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;argNames: 指定该切入点方法参数列表,多个用&lt;code class=&quot;prettyprint&quot;&gt;,&lt;/code&gt;分隔,这些参数将传递给通知方法同名的参数;&lt;/li&gt;
&lt;li&gt;pointcutName: 切入点名字，可以用该名字引用该切入点表达式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;声明通知&quot;&gt;声明通知&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;@AspectJ&lt;/code&gt;风格的声明通知支持5种通知类型:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@Before&lt;/code&gt;: 前置通知,执行连接点方法之前执行&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@AfterReturning&lt;/code&gt;: 后置返回通知, 一个匹配的方法返回的时候执行&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@AfterThrowing&lt;/code&gt;: 异常通知, 在一个方法抛出异常后执行&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@After&lt;/code&gt;: 最终通知, 不论一个方法是如何结束的,最终通知都会运行, 最终通知必须准备处理正常返回和异常返回两种情况&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@Around&lt;/code&gt;: 环绕通知, 在一个方法执行之前和之后执行, 而且它可以决定这个方法在什么时候执行，如何执行，甚至是否执行. 通知的第一个参数必须是&lt;code class=&quot;prettyprint&quot;&gt;ProceedingJoinPoint&lt;/code&gt;类型,在通知体内，调用&lt;code class=&quot;prettyprint&quot;&gt;ProceedingJoinPoint&lt;/code&gt;的&lt;code class=&quot;prettyprint&quot;&gt;proceed()&lt;/code&gt;方法会导致 后台的连接点方法执行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果在同一个连接点上执行多个通知,可以使用&lt;code class=&quot;prettyprint&quot;&gt;@Order&lt;/code&gt;注解决定其执行顺序&lt;/p&gt;

&lt;p&gt;下面是通知的使用方式:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;参数列表参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;参数列表参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;参数列表参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AfterReturning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pointcut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 如果指定了将覆盖value属性指定的，pointcut具有高优先级&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;参数列表参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;returning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;返回值对应参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AfterThrowing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pointcut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;参数列表参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;throwing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;异常对应参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来个小例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeforeExample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pointcutName(param)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;param&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beforeAdvice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 切入点匹配到的参数将传递过来&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上例使用&lt;code class=&quot;prettyprint&quot;&gt;@Before&lt;/code&gt;进行前置通知声明,其中value用于定义切入点表达式或引用命名切入点&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;通知参数&quot;&gt;通知参数&lt;/h2&gt;

&lt;p&gt;通知方法可以获取被通知方法的参数，主要是通过&lt;code class=&quot;prettyprint&quot;&gt;JoinPoint&lt;/code&gt;(环绕通知是&lt;code class=&quot;prettyprint&quot;&gt;JoinPoint&lt;/code&gt;的子类&lt;code class=&quot;prettyprint&quot;&gt;ProceedingJoinPoint&lt;/code&gt;)来获取, &lt;code class=&quot;prettyprint&quot;&gt;JoinPoint&lt;/code&gt;必须是第一个参数, Spring会自动传入.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;JoinPoint&lt;/code&gt;的声明如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JoinPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 执行连接点的方法&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 执行连接点的方法,可以把原来的参数用新的args替换掉&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JoinPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的相关信息  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的简短相关信息  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toLongString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的全部相关信息  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getThis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//返回AOP代理对象  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//返回目标对象  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//返回被通知方法参数列表  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Signature&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//返回当前连接点签名  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SourceLocation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSourceLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//返回连接点方法所在类文件中的位置  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//连接点类型  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StaticPart&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStaticPart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//返回连接点静态部分&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 这是个内部接口, 提供访问连接点的静态部分，如被通知方法签名、连接点类型等&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StaticPart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;Signature&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//返回当前连接点签名  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;//连接点类型  &lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;//唯一标识  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的相关信息  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的简短相关信息  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toLongString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的全部相关信息  &lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;切入点表达式&quot;&gt;切入点表达式&lt;/h2&gt;

&lt;p&gt;切入点表达式就是组成&lt;code class=&quot;prettyprint&quot;&gt;@Pointcut&lt;/code&gt;注解的值, 用于匹配具体的连接点.&lt;br&gt;
切入点表达式由切入点指示符、类型匹配语句、通配符、组合符组成&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;切入点指示符(PCD)&lt;/strong&gt;&lt;br&gt;
在切入点表达式中可以使用如下的AspectJ切入点指示符(PCD):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;execution: 匹配方法执行, 这是最经常的切入点指示符&lt;/li&gt;
&lt;li&gt;within: 匹配特定类型之内的全部方法执行&lt;/li&gt;
&lt;li&gt;this: 用于匹配当前AOP代理对象类型的连接点,包括接口&lt;/li&gt;
&lt;li&gt;target: 用于匹配当前目标对象类型的连接点,不包括接口&lt;/li&gt;
&lt;li&gt;args: 用于匹配当前执行的方法传入的参数为指定类型的连接点&lt;/li&gt;
&lt;li&gt;@within: 用于匹配持有指定注解类型内的连接点&lt;/li&gt;
&lt;li&gt;@target: 用于匹配当前目标对象类型的连接点，其中目标对象持有指定的注解&lt;/li&gt;
&lt;li&gt;@args: 匹配当前执行的方法传入的参数持有指定的注解&lt;/li&gt;
&lt;li&gt;@annotation: 匹配当前执行方法持有指定注解的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看不明白还是看最后面的例子吧&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;类型匹配语句&lt;/strong&gt;&lt;br&gt;
类型匹配语句格式像下面这样(带&lt;code class=&quot;prettyprint&quot;&gt;?&lt;/code&gt;的属于可选,可以不写):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对类的匹配: &lt;code class=&quot;prettyprint&quot;&gt;注解? 类的全限定名字&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对方法的匹配: &lt;code class=&quot;prettyprint&quot;&gt;注解? 修饰符? 返回值类型 类型声明? 方法名(参数列表) 异常列表？&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;类型匹配的通配符&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;*&lt;/code&gt;: 匹配任何数量字符；&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;..&lt;/code&gt;:(两个点)匹配任何数量字符的重复;如在类型模式中匹配任何数量子包,而在方法参数模式中匹配任何数量参数&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;+&lt;/code&gt;: 匹配指定类型的子类型,仅能作为后缀放在类型模式后边&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;组合切入点表达式&lt;/strong&gt;&lt;br&gt;
AspectJ使用 与(&amp;amp;&amp;amp;)、或(||)、非(!)来组合切入点表达式, 在xml文件中可使用and、or、not&lt;/p&gt;

&lt;h2 id=&quot;切入点表达式示例&quot;&gt;切入点表达式示例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;execution&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;execution(方法表达式)&lt;/code&gt;匹配方法执行&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;public * *(..)&lt;/td&gt;
&lt;td&gt;所有public方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService.*()&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService中任何无参方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService＋.*()&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService及子类中任何无参方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService.*(＊)&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService中只有一个参数的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService.*(..)&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService中所有方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService.*(java.util.Date)&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService中只有一个Date类型参数的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService*.test*(..)&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService前缀类型中test前缀开头的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..&lt;em&gt;.&lt;/em&gt;(..)&lt;/td&gt;
&lt;td&gt;cn.test及子包下任何类的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@java.lang.Deprecated * *(..)&lt;/td&gt;
&lt;td&gt;任何持有@Deprecated注解的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@(java.lang.Deprecated &amp;amp;&amp;amp; cn.javass..Secure) * *(..)&lt;/td&gt;
&lt;td&gt;任何持有@java.lang.Deprecated和@ cn.javass..Secure注解的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;within&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;within(类型表达式)&lt;/code&gt;匹配指定类型内的方法执行&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;within(cn.test..*)&lt;/td&gt;
&lt;td&gt;cn.test及子包下的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;within(cn.test..IService＋)&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService及子类的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;within(@cn.test.Secure *)&lt;/td&gt;
&lt;td&gt;cn.test及子包下带有@cn.test.Secure注解的任何类(接口不行)的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;this&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;this(类型全限定名)&lt;/code&gt;匹配当前AOP代理对象类型的执行方法,包括引入接口,不支持通配符&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;this(cn.test.IService)&lt;/td&gt;
&lt;td&gt;当前AOP对象实现了IService接口的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;target&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;target(类型全限定名)&lt;/code&gt;匹配当前目标对象类型的执行方法,不包括引入接口,不支持通配符&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;this(cn.test.IService)&lt;/td&gt;
&lt;td&gt;当前目标对象(非AOP对象)实现了IService接口的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;args&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;args(参数类型列表)&lt;/code&gt;匹配传入参数(不是声明时的参数)为指定类型的执行方法,参数类型必须是全限定名, 不支持通配符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;args属于动态切入点，这种切入点开销非常大，非特殊情况最好不要使用&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;args(java.lang.String, ..)&lt;/td&gt;
&lt;td&gt;第一个参数为String,后面有任意个参数的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@within&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@within(注解类型全限定名)&lt;/code&gt;匹配所以持有指定注解类型内的方法, 必须是在目标对象上声明注解，在接口上声明不起作用&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@within(cn.test.Secure)&lt;/td&gt;
&lt;td&gt;任何目标对象对应的类型持有Secure注解的类方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@target&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@target(注解类型全限定名)&lt;/code&gt;匹配当前目标对象类型的执行方法, 必须是在目标对象上声明注解，在接口上声明不起作用&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@target(cn.test.Secure)&lt;/td&gt;
&lt;td&gt;任何目标对象对应的类型持有Secure注解的类方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@args&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@args(注解类型全限定名)&lt;/code&gt;匹配当前执行的方法传入的参数持有指定注解的执行&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@args(cn.test.Secure)&lt;/td&gt;
&lt;td&gt;任何只接受一个参数的方法，且方法运行时传入的参数持有Secure注解&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@annotation&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@annotation(注解类型全限定名)&lt;/code&gt;匹配当前执行方法持有指定注解的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@annotation(cn.test.Secure)&lt;/td&gt;
&lt;td&gt;当前执行方法上持有Secure注解的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;hr&gt;
</description>
        <pubDate>Thu, 26 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-26-Spring%E7%9A%84AOP.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-26-Spring%E7%9A%84AOP.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava不可变集合</title>
        <description>&lt;p&gt;JDK中也提供了&lt;code class=&quot;prettyprint&quot;&gt;Collections.unmodifiableXXX&lt;/code&gt;方法把普通集合包装为不可变形式&lt;br&gt;
Guava直接提供了不可变集合类型&lt;code class=&quot;prettyprint&quot;&gt;ImmutableXXX&lt;/code&gt;, 所有不可变集合都不接受&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;值  &lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;怎么使用不可变集合&quot;&gt;怎么使用不可变集合&lt;/h2&gt;

&lt;p&gt;不可变集合可以用如下多种方式创建&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;copyOf方法: 如&lt;code class=&quot;prettyprint&quot;&gt;ImmutableSet.copyOf(set)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;of方法: 如&lt;code class=&quot;prettyprint&quot;&gt;ImmutableSet.of(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;)&lt;/code&gt;或&lt;code class=&quot;prettyprint&quot;&gt;ImmutableMap.of(&amp;quot;a&amp;quot;, 1, &amp;quot;b&amp;quot;, 2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Builder工具: 如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GOOGLE_COLORS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WEBSAFE_COLORS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;191&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;aslist视图&quot;&gt;asList视图&lt;/h2&gt;

&lt;p&gt;所有不可变集合都有一个asList()方法提供ImmutableList视图，来帮助你用列表形式方便地读取集合元素&lt;br&gt;
例如，你可以使用&lt;code class=&quot;prettyprint&quot;&gt;sortedSet.asList().get(k)&lt;/code&gt;从&lt;code class=&quot;prettyprint&quot;&gt;ImmutableSortedSet&lt;/code&gt;中读取第k个最小元素&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Mon, 23 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-23-Guava%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-23-Guava%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava之CharMatcher</title>
        <description>&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;CharMatcher&lt;/code&gt;是字符匹配器, 代表着某一类字符, &lt;code class=&quot;prettyprint&quot;&gt;CharMatcher&lt;/code&gt;实现了&lt;code class=&quot;prettyprint&quot;&gt;Predicate&amp;lt;Character&amp;gt;&lt;/code&gt;接口&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;CharMatcher&lt;/code&gt;提供了一系列方法，让你对字符作特定类型的操作：修剪[trim]、折叠[collapse]、移除[remove]、保留[retain]等&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;CharMatcher&lt;/code&gt;只处理&lt;code class=&quot;prettyprint&quot;&gt;char&lt;/code&gt;类型代表的字符即&lt;code class=&quot;prettyprint&quot;&gt;0x0000&lt;/code&gt;~&lt;code class=&quot;prettyprint&quot;&gt;0xFFFF&lt;/code&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;获取charmatcher&quot;&gt;获取CharMatcher&lt;/h2&gt;

&lt;p&gt;CharMatcher中的常量可以满足大多数字符匹配需求&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内置CharMatcher&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ANY&lt;/td&gt;
&lt;td&gt;任何字符都匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NONE&lt;/td&gt;
&lt;td&gt;不匹配任何字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WHITESPACE&lt;/td&gt;
&lt;td&gt;空白字符(Unicode标准)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BREAKING_WHITESPACE&lt;/td&gt;
&lt;td&gt;被空白隔开的两个词之间的那个空白, 比如两个单词之间的空白间隔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INVISIBLE&lt;/td&gt;
&lt;td&gt;不可见字符, 如LINE_SEPARATOR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DIGIT&lt;/td&gt;
&lt;td&gt;Unicode数字,比JAVA_DIGIT范围大,如果要表示0～9请用&lt;code class=&quot;prettyprint&quot;&gt;inRange(&amp;#39;0&amp;#39;, &amp;#39;9&amp;#39;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_LETTER&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_DIGIT&lt;/td&gt;
&lt;td&gt;Java定义的数字,范围超过0~9,如果要表示0～9请用&lt;code class=&quot;prettyprint&quot;&gt;inRange(&amp;#39;0&amp;#39;, &amp;#39;9&amp;#39;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_LETTER_OR_DIGIT&lt;/td&gt;
&lt;td&gt;JAVA_LETTER 或 JAVA_DIGIT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_UPPER_CASE&lt;/td&gt;
&lt;td&gt;范围比a~z大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_LOWER_CASE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_ISO_CONTROL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ASCII&lt;/td&gt;
&lt;td&gt;ASCII码,这意味着它的代码点低于128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SINGLE_WIDTH&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZEROES&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NINES&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;获取字符匹配器的常见方法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;is(final char match)&lt;/code&gt;: 给定单一字符匹配&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;isNot(final char match)&lt;/code&gt;: 不是某字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;anyOf(final CharSequence sequence)&lt;/code&gt;: 枚举匹配字符,如&lt;code class=&quot;prettyprint&quot;&gt;CharMatcher.anyOf(“aeiou”)&lt;/code&gt;匹配小写英语元音&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;noneOf(CharSequence sequence)&lt;/code&gt;: 不是sequence里的任意一个,anyOf的相反方法, 等同于&lt;code class=&quot;prettyprint&quot;&gt;anyOf(sequence).negate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;inRange(final char startInclusive, final char endInclusive)&lt;/code&gt;: 给定字符范围匹配，如&lt;code class=&quot;prettyprint&quot;&gt;CharMatcher.inRange(‘a’, ‘z’)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;or(CharMatcher other)&lt;/code&gt;: 取并集&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;and(CharMatcher other)&lt;/code&gt;: 取交集&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;negate(CharMatcher other)&lt;/code&gt;: 取反&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;使用字符匹配器&quot;&gt;使用字符匹配器&lt;/h2&gt;

&lt;p&gt;返回是否匹配(&lt;code class=&quot;prettyprint&quot;&gt;boolean&lt;/code&gt;)的方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean matchesAnyOf(CharSequence sequence)&lt;/code&gt; : 是否sequence中有匹配的字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean matchesAllOf(CharSequence sequence)&lt;/code&gt; : 是否sequence中的所有字符都匹配&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean matchesNoneOf(CharSequence sequence)&lt;/code&gt; : sequence中不包含能够匹配的字符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;返回&lt;code class=&quot;prettyprint&quot;&gt;int&lt;/code&gt;的方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int indexIn(CharSequence sequence)&lt;/code&gt; : 返回第一次匹配上的下标, -1表示没有匹配的&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int indexIn(CharSequence sequence, int start)&lt;/code&gt; : &amp;gt;=start或-1&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int lastIndexIn(CharSequence sequence)&lt;/code&gt; : 最后一次匹配的下标, -1表示没有匹配的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;返回匹配的内容(&lt;code class=&quot;prettyprint&quot;&gt;String&lt;/code&gt;)的方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String removeFrom(CharSequence sequence)&lt;/code&gt; : 移除匹配字符,返回的是移除匹配字符之后剩下的&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String retainFrom(CharSequence sequence)&lt;/code&gt; : 保留匹配字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String replaceFrom(CharSequence sequence, char replacement)&lt;/code&gt; : 替代匹配字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String replaceFrom(CharSequence sequence, CharSequence replacement)&lt;/code&gt; :替代匹配字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String trimFrom(CharSequence sequence)&lt;/code&gt; : 移除前导和尾部的匹配字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String trimLeadingFrom(CharSequence sequence)&lt;/code&gt;: 只移除前导匹配的&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String trimTrailingFrom(CharSequence sequence)&lt;/code&gt;: 只移除尾部匹配的&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String collapseFrom(CharSequence sequence, char replacement)&lt;/code&gt;: 替换,但连续的匹配字符只替换一次&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String trimAndCollapseFrom(CharSequence sequence, char replacement)&lt;/code&gt;: 中间连续的只替换一次,开头和结尾的直接去掉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bazaar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;quot;bzr&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retainFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bazaar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;quot;aaa&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;radar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;rodor&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;yaha&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;oo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;yoohoo&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trimFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;abacatbab&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;cat&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trimFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 等同于 str.trim()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;eko&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collapseFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bookkeeper&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;b-p-r&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Sat, 21 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-21-Guava%E4%B9%8BCharMatcher.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-21-Guava%E4%B9%8BCharMatcher.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava之Splitter</title>
        <description>&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter&lt;/code&gt;相当于拆分器,跟&lt;a href=&quot;/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-19-Guava%E4%B9%8BJoiner.html&quot;&gt;Joiner&lt;/a&gt;正好是相反的操作&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;生成splitter的方法&quot;&gt;生成&lt;code class=&quot;prettyprint&quot;&gt;Splitter&lt;/code&gt;的方法&lt;/h2&gt;

&lt;p&gt;工厂方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter on(char separator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter on(final CharMatcher separatorMatcher)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter on(final String separator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter on(final Pattern separatorPattern)&lt;/code&gt;: 支持正则&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter onPattern(String separatorPattern)&lt;/code&gt;: 等效于&lt;code class=&quot;prettyprint&quot;&gt;Splitter.on(Pattern.compile(pattern))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter fixedLength(final int length)&lt;/code&gt;: 每length个元素分成一组&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修饰方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter omitEmptyStrings()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter limit(int limit)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter trimResults()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter trimResults(CharMatcher trimmer)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo,,bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;foo&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;bar&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo,;bar,quux&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;foo&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;quux&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo, bar,baz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;foo&amp;quot;, &amp;quot;bar,baz&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\d+&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a12b3c&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [a, b, c]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fixedLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;abcde&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;ab&amp;quot;, &amp;quot;cd&amp;quot;, &amp;quot;e&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a,b,c,d&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c,d&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;omitEmptyStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a,,,b,,,c,d&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c,d&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trimResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; a , b , c , d &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c , d&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trimResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_a ,_b_ ,c__&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;a &amp;quot;, &amp;quot;b_ &amp;quot;, &amp;quot;c&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;split-方法&quot;&gt;split 方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Iterable&amp;lt;String&amp;gt; split(final CharSequence sequence)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;String&amp;gt; splitToList(CharSequence sequence)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;mapsplitter&quot;&gt;MapSplitter&lt;/h2&gt;

&lt;p&gt;Splitter提供了个方法返回内部类&lt;code class=&quot;prettyprint&quot;&gt;Splitter.MapSplitter&lt;/code&gt;专门分割成map  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;MapSplitter withKeyValueSeparator(String separator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;MapSplitter withKeyValueSeparator(char separator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;MapSplitter withKeyValueSeparator(Splitter keyValueSplitter)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意: &lt;code class=&quot;prettyprint&quot;&gt;MapSplitter&lt;/code&gt;的&lt;code class=&quot;prettyprint&quot;&gt;split&lt;/code&gt;方法返回的是&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withKeyValueSeparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a=1&amp;amp;b=2&amp;amp;c=3&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-20-Guava%E4%B9%8BSplitter.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-20-Guava%E4%B9%8BSplitter.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava之Joiner</title>
        <description>&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Joiner&lt;/code&gt;在Guava的&lt;code class=&quot;prettyprint&quot;&gt;com.google.common.base&lt;/code&gt;包中, 算是字符处理工具, 其作用是连接多个元素, 可当作连接器来使用  &lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;生成joiner的方法&quot;&gt;生成&lt;code class=&quot;prettyprint&quot;&gt;Joiner&lt;/code&gt;的方法&lt;/h2&gt;

&lt;p&gt;工厂方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Joiner on(String separator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Joiner on(char separator)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修饰方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Joiner useForNull(final String nullText)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Joiner skipNulls()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;skipNulls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Harry&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Ron&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hermione&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Harry; Ron; Hermione&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: Joiner类是不可变的, 即它是线程安全的, 可以将其定义为&lt;code class=&quot;prettyprint&quot;&gt;static final&lt;/code&gt;常量&lt;br&gt;
像下面这样使用是 &lt;strong&gt;错误&lt;/strong&gt; 的:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joiner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// joiner 是不可变的&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;skipNulls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 这里返回了个新的Joiner, 原来的joiner并没变&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrong&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;wrong&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这就直接报NullPointerException了, 原来的joiner没有skipNull功能&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;join-方法&quot;&gt;join 方法&lt;/h2&gt;

&lt;p&gt;返回连接之后的字符串, 返回的字符串都是&lt;code class=&quot;prettyprint&quot;&gt;final&lt;/code&gt;的:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;public final String join(Iterable&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;public final String join(Iterator&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;public final String join(Object[] parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;public final String join(Object first, Object second, Object... rest)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns &amp;quot;1,5,7&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;appendto-方法&quot;&gt;appendTo 方法&lt;/h2&gt;

&lt;p&gt;把后面的参数以字符串的方式添加到第一个参数后面&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;java.lang.Appendable&lt;/code&gt;接口的子类(如&lt;code class=&quot;prettyprint&quot;&gt;StringBuilder&lt;/code&gt; &lt;code class=&quot;prettyprint&quot;&gt;BufferedWriter&lt;/code&gt;等), 都可以作为第一个参数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;StringBuilder appendTo(StringBuilder builder, Iterable&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;StringBuilder appendTo(StringBuilder builder, Iterable&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;StringBuilder appendTo(StringBuilder builder, Object[] parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;StringBuilder appendTo(StringBuilder builder, Object first, Object second, Object... rest)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;A extends Appendable&amp;gt; A appendTo(A appendable, Iterable&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;A extends Appendable&amp;gt; A appendTo(A appendable, Iterator&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;A extends Appendable&amp;gt; A appendTo(A appendable, Object[] parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;A extends Appendable&amp;gt; A appendTo(A appendable, Object first, Object second, Object... rest)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;appendTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;list:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// list:1,2,3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;mapjoiner&quot;&gt;MapJoiner&lt;/h2&gt;

&lt;p&gt;Joiner提供了个方法返回内部类&lt;code class=&quot;prettyprint&quot;&gt;Joiner.MapJoiner&lt;/code&gt;专门用于处理map  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;MapJoiner withKeyValueSeparator(String keyValueSeparator)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Maps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withKeyValueSeparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// b-&amp;gt;2;a-&amp;gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Thu, 19 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-19-Guava%E4%B9%8BJoiner.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-19-Guava%E4%B9%8BJoiner.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava新集合类型</title>
        <description>&lt;p&gt;guava的collection包里新增加了几个集合类型非常实用&lt;br&gt;
新增类型有:Multiset、Multimap、BiMap、Table、&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;multiset&quot;&gt;Multiset&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;继承自&lt;code class=&quot;prettyprint&quot;&gt;Collection&lt;/code&gt;, 类似于&lt;code class=&quot;prettyprint&quot;&gt;Set&lt;/code&gt;, 里面的元素是无顺序的, 但不同的是它可以多次添加相等的元素, 并能记录每个元素的个数.
Multiset {a, a, b}和{a, b, a}是相等的, &lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;类似于但绝不等同于&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;E, Integer&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;a href=&quot;/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Collection%E6%95%B4%E7%90%86.html&quot;&gt;Collection中的方法&lt;/a&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;都有, 注意&lt;code class=&quot;prettyprint&quot;&gt;size()&lt;/code&gt;方法, 重复的元素也会算个数(类似的其它方法也会包含重复元素)&lt;br&gt;
除此之外&lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;接口中定义的方法有:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int count(Object element)&lt;/code&gt;: 返回给定元素的计数&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int add(E element, int occurrences)&lt;/code&gt;: 添加元素并指定元素个数; 返回添加之前该元素的个数, 一般为0&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int remove(Object element, int occurrences)&lt;/code&gt;: 移除元素, 若该元素个数小于指定个数,则全移除; 返回操作之前该元素的个数&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int setCount(E element, int count)&lt;/code&gt;: 设定某一个元素的重复次数, 相当于add和remove的组合体; 返回操作之前该元素的个数&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean setCount(E element, int oldCount, int newCount)&lt;/code&gt;: 将符合原有重复个数的元素修改为新的重复次数, 原来个数不为oldCount不会修改&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;视图操作&quot;&gt;视图操作&lt;/h3&gt;

&lt;p&gt;对视图的所有操作都会反映到原来的Multiset上&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;E&amp;gt; elementSet()&lt;/code&gt;: 返回仅包含不同元素的set, 对set进行移除, 会反映到multiset上(若multi中有&lt;code class=&quot;prettyprint&quot;&gt;keyX2&lt;/code&gt;, 则会全被移除)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;Entry&amp;lt;E&amp;gt;&amp;gt; entrySet()&lt;/code&gt;: 返回Set&lt;Multiset.Entry&gt;, 包含的Entry支持使用&lt;code class=&quot;prettyprint&quot;&gt;getElement()&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;getCount()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;multiset的各种实现&quot;&gt;Multiset的各种实现&lt;/h3&gt;

&lt;p&gt;Multiset的实现类, 可以通过构造方法new出来, 也可以调用&lt;code class=&quot;prettyprint&quot;&gt;XXXMultiset.create()&lt;/code&gt;静态函数来创建&lt;br&gt;
它们都直接继承了Multiset接口:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Guava实现&lt;/th&gt;
&lt;th&gt;对比JDK的Map&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;是否支持null&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashMultiset&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedHashSet&lt;/td&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeMultiset&lt;/td&gt;
&lt;td&gt;TreeMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EnumMultiset&lt;/td&gt;
&lt;td&gt;EnumMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableMultiset&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ConcurrentHashMultiset&lt;/td&gt;
&lt;td&gt;ConcurrentHashMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ForwardingMultiset&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;hr&gt;

&lt;h2 id=&quot;multimap&quot;&gt;Multimap&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;把一个键映射到多个值, 类似于但不等同于&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;K, Collection&amp;lt;V&amp;gt;&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;跟JDK中的&lt;code class=&quot;prettyprint&quot;&gt;Map&lt;/code&gt;并没有什么关系, 但&lt;a href=&quot;/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Map%E6%95%B4%E7%90%86.html&quot;&gt;Map中的方法&lt;/a&gt;在&lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;也有对应的  &lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;接口定义的普通方法有:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int size()&lt;/code&gt;: 返回键值对的个数 &lt;code class=&quot;prettyprint&quot;&gt;a-&amp;gt;1, a-&amp;gt;2&lt;/code&gt;算两个&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean isEmpty()&lt;/code&gt;: 是否为空&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsKey(Object key)&lt;/code&gt;: 是否包含key&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsValue(Object value)&lt;/code&gt;: 是否包含value&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsEntry(Object key, Object value)&lt;/code&gt;: 是否包含key-value对&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean put(K key, V value)&lt;/code&gt;: 如果map元素增加了则返回true, 对于允许存在重复键值对的实现类总是返回&lt;code class=&quot;prettyprint&quot;&gt;true&lt;/code&gt;,
不允许重复键值对存在的实现类才有可能返回&lt;code class=&quot;prettyprint&quot;&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean putAll(K key, Iterable values)&lt;/code&gt;: map改变则返回true&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean putAll(Multimap multimap)&lt;/code&gt;: map改变则返回true&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean remove(Object key, Object value)&lt;/code&gt;: 移除键值对, map变了返回true&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; removeAll(Object key)&lt;/code&gt;: 移除与key相关的所有values(key也没了), 并返回values组成的集合(可能为空)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; replaceValues(K key, Iterable values)&lt;/code&gt;: 把与key相关的value全替换掉, 如果values为空,
则等同于&lt;code class=&quot;prettyprint&quot;&gt;removeAll(key)&lt;/code&gt;, 如果原来不包含key,则相当于&lt;code class=&quot;prettyprint&quot;&gt;putAll(key, values)&lt;/code&gt;; 返回被替换掉的value集合(可能为空)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void clear()&lt;/code&gt;: 清空map&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; get(K key)&lt;/code&gt;: 返回key对应的value, 没有key则返回空集合(不是&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;视图操作&quot;&gt;视图操作&lt;/h3&gt;

&lt;p&gt;对这些返回结果的所有操作都会反映到原来的Multimap上&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;K&amp;gt; keySet()&lt;/code&gt;: 返回不重复的key集合&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multiset&amp;lt;K&amp;gt; keys()&lt;/code&gt;: 返回可重复的key集合&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; values()&lt;/code&gt;: 返回value的集合, 包含重复值&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; entries()&lt;/code&gt;: 返回所有键值对,包括重复键&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;K, Collection&amp;lt;V&amp;gt;&amp;gt; asMap()&lt;/code&gt;: 返回&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;K,Collection&amp;lt;V&amp;gt;&amp;gt;&lt;/code&gt;形式的视图, 返回的Map支持remove操作, 并且会反映到Multimap,
但它不支持put或putAll操作; ListMultimap的&lt;code class=&quot;prettyprint&quot;&gt;asMap.get(key)&lt;/code&gt;不能直接返回List,
可以使用&lt;code class=&quot;prettyprint&quot;&gt;Multimaps.asMap.get(key)&lt;/code&gt;来返回具体的集合类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;multimap的各种实现&quot;&gt;Multimap的各种实现&lt;/h3&gt;

&lt;p&gt;Multimap有许多实现类:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实现类&lt;/th&gt;
&lt;th&gt;键行为类似&lt;/th&gt;
&lt;th&gt;值行为类似&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;是否支持null&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LinkedListMultimap&lt;/td&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td&gt;LinkedList&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayListMultimap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td&gt;ArrayList&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableListMultimap&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;td&gt;ImmutableList&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HashMultimap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td&gt;HashSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedHashMultimap&lt;/td&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td&gt;LinkedHashSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableSetMultimap&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;td&gt;ImmutableSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeMultimap&lt;/td&gt;
&lt;td&gt;TreeMap&lt;/td&gt;
&lt;td&gt;TreeSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;其实现类的继承关系图如下:
&lt;img src=&quot;/static/images/multimap.png&quot; alt=&quot;Multimap继承关系图&quot; title=&quot;Multimap继承关系图&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;bimap&quot;&gt;BiMap&lt;/h2&gt;

&lt;p&gt;BiMap是个特殊的Map(继承自JDK的Map), 它可以很方便地实现key-value的双向映射, 所以它要求value也必须是唯一的&lt;br&gt;
BiMap的put方法与Map不太一样, put键值对KV时:&lt;br&gt;
若先前KV都不存在,直接put; KV都已存在,则相当于没改变; K在V不在, 则&lt;code class=&quot;prettyprint&quot;&gt;KV&lt;/code&gt;替换&lt;code class=&quot;prettyprint&quot;&gt;KV&amp;#39;&lt;/code&gt;;(至此与Map都一样)&lt;br&gt;
K不在V在, Map可以直接put进去, 但BiMap则不可以&lt;br&gt;
与Map意义不一样的方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;V put(K key, V value)&lt;/code&gt;: K不在V在时, 抛出&lt;code class=&quot;prettyprint&quot;&gt;IllegalArgumentException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void putAll(Map map)&lt;/code&gt;: 同样可能抛异常, 但有可能只加了部分元素进去, 这取决于迭代顺序, 在发生异常之前迭代到的元素可能已经添加进去了&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;V&amp;gt; values()&lt;/code&gt;: 视图操作, 由于BiMap里的value是唯一的, 因此返回的是Set而不是Collection&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsValue(Object value)&lt;/code&gt;: 是否包含value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BiMap比Map新增的方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;V forcePut(K key, V value)&lt;/code&gt;: K不在V在时, 则&lt;code class=&quot;prettyprint&quot;&gt;KV&lt;/code&gt;替换&lt;code class=&quot;prettyprint&quot;&gt;K&amp;#39;V&lt;/code&gt;; 返回先前与key关联的value, 若先前没有相同的key则返回null&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;BiMap&amp;lt;V, K&amp;gt; inverse()&lt;/code&gt;: 视图操作, 返回value到key的映射Map, 两个map里的数据是公用的, 即删除&lt;code class=&quot;prettyprint&quot;&gt;V1-&amp;gt;K1&lt;/code&gt;时, &lt;code class=&quot;prettyprint&quot;&gt;K1-&amp;gt;V1&lt;/code&gt;也没了&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;bimap接口的实现类&quot;&gt;BiMap接口的实现类&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实现类&lt;/th&gt;
&lt;th&gt;key-value&lt;/th&gt;
&lt;th&gt;value-&amp;gt;key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashBiMap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EnumBiMap&lt;/td&gt;
&lt;td&gt;EnumMap&lt;/td&gt;
&lt;td&gt;EnumMap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EnumHashBiMap&lt;/td&gt;
&lt;td&gt;EnumMap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableBiMap&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;hr&gt;

&lt;h2 id=&quot;table&quot;&gt;Table&lt;/h2&gt;

&lt;p&gt;Table支持两个键进行, 就像名字一样, 可以通过行和列确定一个元素&lt;br&gt;
Table是这样定义的&lt;code class=&quot;prettyprint&quot;&gt;Table&amp;lt;R, C, V&amp;gt;&lt;/code&gt;, 它提供了多种视图:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;R, Map&amp;lt;C, V&amp;gt;&amp;gt; rowMap()&lt;/code&gt;: 用&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;R, Map&amp;lt;C, V&amp;gt;&amp;gt;&lt;/code&gt;表现&lt;code class=&quot;prettyprint&quot;&gt;Table&amp;lt;R, C, V&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;R&amp;gt; rowKeySet()&lt;/code&gt;: 返回行的集合&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;C, V&amp;gt; row(R rowKey)&lt;/code&gt;: 用&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;C, V&amp;gt;&lt;/code&gt;返回给定行的所有列，对这个map进行的写操作也将写入Table中&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;C, Map&amp;lt;R, V&amp;gt;&amp;gt; columnMap()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;C&amp;gt; columnKeySet()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;R, V&amp;gt; column(C columnKey)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;Cell&amp;lt;R, C, V&amp;gt;&amp;gt; cellSet()&lt;/code&gt;: 用元素类型为&lt;code class=&quot;prettyprint&quot;&gt;Table.Cell&amp;lt;R, C, V&amp;gt;&lt;/code&gt;的Set表现&lt;code class=&quot;prettyprint&quot;&gt;Table&amp;lt;R, C, V&amp;gt;&lt;/code&gt;.
&lt;code class=&quot;prettyprint&quot;&gt;Cell&lt;/code&gt;类似于&lt;code class=&quot;prettyprint&quot;&gt;Map.Entry&lt;/code&gt;,但它是用行和列两个键区分的&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; values()&lt;/code&gt;: 返回V的集合&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;table接口的实现类&quot;&gt;Table接口的实现类&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实现类&lt;/th&gt;
&lt;th&gt;本质&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashBasedTable&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;prettyprint&quot;&gt;HashMap&amp;lt;R, HashMap&amp;lt;C, V&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeBasedTable&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;prettyprint&quot;&gt;TreeMap&amp;lt;R, TreeMap&amp;lt;C,V&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayTable&lt;/td&gt;
&lt;td&gt;二维数组&lt;/td&gt;
&lt;td&gt;要求在构造时就指定行和列的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableTable&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;prettyprint&quot;&gt;ImmutableMap&amp;lt;R, ImmutableMap&amp;lt;C, V&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;这是个抽象类,对稀疏或密集的数据集都有优化&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;hr&gt;

&lt;h2 id=&quot;rangeset&quot;&gt;RangeSet&lt;/h2&gt;

&lt;p&gt;RangeSet描述了一组不相连的、非空的区间。当把一个区间添加到可变的RangeSet时，所有相连的区间会被合并，空区间会被忽略  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;RangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeRangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// {[1,10]}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closedOpen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 不相连区间:{[1,10], [11,15)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closedOpen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 相连区间; {[1,10], [11,20)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openClosed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 空区间; {[1,10], [11,20)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 分割[1, 10]; {[1,5], [10,10], [11,20)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要合并&lt;code class=&quot;prettyprint&quot;&gt;Range.closed(1, 10)&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;Range.closedOpen(11,15)&lt;/code&gt;这样的区间,
你需要首先用&lt;code class=&quot;prettyprint&quot;&gt;Range.canonical(DiscreteDomain)&lt;/code&gt;对区间进行预处理，例如&lt;code class=&quot;prettyprint&quot;&gt;DiscreteDomain.integers()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;RangeSet不支持GWT，也不支持JDK5和更早版本；因为，RangeSet需要充分利用JDK6中NavigableMap的特性&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;rangemap&quot;&gt;RangeMap&lt;/h2&gt;

&lt;p&gt;RangeMap描述了不相交的、非空的区间到特定值的映射。
和RangeSet不同，RangeMap不会合并相邻的映射，即便相邻的区间映射到相同的值。例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;RangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rangeMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeRangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// {[1,10] =&amp;gt; &amp;quot;foo&amp;quot;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// {[1,3] =&amp;gt; &amp;quot;foo&amp;quot;, (3,6) =&amp;gt; &amp;quot;bar&amp;quot;, [6,10] =&amp;gt; &amp;quot;foo&amp;quot;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// {[1,3] =&amp;gt; &amp;quot;foo&amp;quot;, (3,6) =&amp;gt; &amp;quot;bar&amp;quot;, [6,10] =&amp;gt; &amp;quot;foo&amp;quot;, (10,20) =&amp;gt; &amp;quot;foo&amp;quot;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// {[1,3] =&amp;gt; &amp;quot;foo&amp;quot;, (3,5) =&amp;gt; &amp;quot;bar&amp;quot;, (11,20) =&amp;gt; &amp;quot;foo&amp;quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Wed, 18 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-18-Guava%E6%96%B0%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-18-Guava%E6%96%B0%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
  </channel>
</rss>
