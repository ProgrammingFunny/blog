<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逆水行舟</title>
    <description>Michael King&#39;s Blog</description>
    <link>http://loveshisong.cn/</link>
    <atom:link href="http://loveshisong.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 18 Nov 2015 10:40:46 +0800</pubDate>
    <lastBuildDate>Wed, 18 Nov 2015 10:40:46 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Guava新集合类型</title>
        <description>&lt;p&gt;guava的collection包里新增加了几个集合类型非常实用  &lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;multiset&quot;&gt;Multiset&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;继承自&lt;code class=&quot;prettyprint&quot;&gt;Collection&lt;/code&gt;, 类似于&lt;code class=&quot;prettyprint&quot;&gt;Set&lt;/code&gt;, 里面的元素是无顺序的, 但不同的是它可以多次添加相等的元素, 并能记录每个元素的个数.
Multiset {a, a, b}和{a, b, a}是相等的, &lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;类似于但绝不等同于&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;E, Integer&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;a href=&quot;/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Collection%E6%95%B4%E7%90%86.html&quot;&gt;Collection中的方法&lt;/a&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;都有, 注意&lt;code class=&quot;prettyprint&quot;&gt;size()&lt;/code&gt;方法, 重复的元素也会算个数(类似的其它方法也会包含重复元素)&lt;br&gt;
除此之外&lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;接口中定义的方法有:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int count(Object element)&lt;/code&gt;: 返回给定元素的计数&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int add(E element, int occurrences)&lt;/code&gt;: 添加元素并指定元素个数; 返回添加之前该元素的个数, 一般为0&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int remove(Object element, int occurrences)&lt;/code&gt;: 移除元素, 若该元素个数小于指定个数,则全移除; 返回操作之前该元素的个数&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int setCount(E element, int count)&lt;/code&gt;: 设定某一个元素的重复次数, 相当于add和remove的组合体; 返回操作之前该元素的个数&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean setCount(E element, int oldCount, int newCount)&lt;/code&gt;: 将符合原有重复个数的元素修改为新的重复次数, 原来个数不为oldCount不会修改&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;E&amp;gt; elementSet()&lt;/code&gt;: 返回仅包含不同元素的set&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;Entry&amp;lt;E&amp;gt;&amp;gt; entrySet()&lt;/code&gt;: 返回Set&lt;Multiset.Entry&gt;, 包含的Entry支持使用&lt;code class=&quot;prettyprint&quot;&gt;getElement()&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;getCount()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;multiset的各种实现&quot;&gt;Multiset的各种实现&lt;/h2&gt;

&lt;p&gt;Multiset的实现类, 可以通过构造方法new出来, 也可以调用&lt;code class=&quot;prettyprint&quot;&gt;XXXMultiset.create()&lt;/code&gt;静态函数来创建&lt;br&gt;
它们都直接继承了Multiset接口:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Guava实现&lt;/th&gt;
&lt;th&gt;对比JDK的Map&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;是否支持null&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashMultiset&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedHashSet&lt;/td&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeMultiset&lt;/td&gt;
&lt;td&gt;TreeMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EnumMultiset&lt;/td&gt;
&lt;td&gt;EnumMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableMultiset&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ConcurrentHashMultiset&lt;/td&gt;
&lt;td&gt;ConcurrentHashMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ForwardingMultiset&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;hr&gt;

&lt;h2 id=&quot;multimap&quot;&gt;Multimap&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;把一个键映射到多个值, 类似于但不等同于&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;K, Collection&amp;lt;V&amp;gt;&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;跟JDK中的&lt;code class=&quot;prettyprint&quot;&gt;Map&lt;/code&gt;并没有什么关系, 但&lt;a href=&quot;/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Map%E6%95%B4%E7%90%86.html&quot;&gt;Map中的方法&lt;/a&gt;在&lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;也有对应的&lt;br&gt;
 &lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;接口定义的方法有:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int size()&lt;/code&gt;: 返回键值对的个数 &lt;code class=&quot;prettyprint&quot;&gt;a-&amp;gt;1, a-&amp;gt;2&lt;/code&gt;算两个&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean isEmpty()&lt;/code&gt;: 是否为空&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsKey(Object key)&lt;/code&gt;: 是否包含key&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsValue(Object value)&lt;/code&gt;: 是否包含value&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsEntry(Object key, Object value)&lt;/code&gt;: 是否包含key-value对&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean put(K key, V value)&lt;/code&gt;: 如果map元素增加了则返回true, 对于允许存在重复键值对的实现类总是返回&lt;code class=&quot;prettyprint&quot;&gt;true&lt;/code&gt;,
不允许重复键值对存在的实现类才有可能返回&lt;code class=&quot;prettyprint&quot;&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean putAll(K key, Iterable values)&lt;/code&gt;: map改变则返回true&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean putAll(Multimap multimap)&lt;/code&gt;: map改变则返回true&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean remove(Object key, Object value)&lt;/code&gt;: 移除键值对, map变了返回true&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; removeAll(Object key)&lt;/code&gt;: 移除与key相关的所有values(key也没了), 并返回values组成的集合(可能为空)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; replaceValues(K key, Iterable values)&lt;/code&gt;: 把与key相关的value全替换掉, 如果values为空,
则等同于&lt;code class=&quot;prettyprint&quot;&gt;removeAll(key)&lt;/code&gt;, 如果原来不包含key,则相当于&lt;code class=&quot;prettyprint&quot;&gt;putAll(key, values)&lt;/code&gt;; 返回被替换掉的value集合(可能为空)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void clear()&lt;/code&gt;: 清空map&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; get(K key)&lt;/code&gt;: 返回key对应的value, 没有key则返回空集合(不是&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;视图操作&quot;&gt;视图操作&lt;/h3&gt;

&lt;p&gt;对这些返回结果的所有操作都会反映到原来的Multimap上&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;K&amp;gt; keySet()&lt;/code&gt;: 返回不重复的key集合&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multiset&amp;lt;K&amp;gt; keys()&lt;/code&gt;: 返回可重复的key集合&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; values()&lt;/code&gt;: 返回value的集合, 包含重复值&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; entries()&lt;/code&gt;: 返回所有键值对,包括重复键&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;K, Collection&amp;lt;V&amp;gt;&amp;gt; asMap()&lt;/code&gt;: 返回&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;K,Collection&amp;lt;V&amp;gt;&amp;gt;&lt;/code&gt;形式的视图, 返回的Map支持remove操作, 并且会反映到Multimap,
但它不支持put或putAll操作; ListMultimap的&lt;code class=&quot;prettyprint&quot;&gt;asMap.get(key)&lt;/code&gt;不能直接返回List,
可以使用&lt;code class=&quot;prettyprint&quot;&gt;Multimaps.asMap.get(key)&lt;/code&gt;来返回具体的集合类型&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;multimap的各种实现&quot;&gt;Multimap的各种实现&lt;/h2&gt;

&lt;p&gt;Multimap有许多实现类:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实现类&lt;/th&gt;
&lt;th&gt;键行为类似&lt;/th&gt;
&lt;th&gt;值行为类似&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;是否支持null&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LinkedListMultimap&lt;/td&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td&gt;LinkedList&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayListMultimap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td&gt;ArrayList&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableListMultimap&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;td&gt;ImmutableList&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HashMultimap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td&gt;HashSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedHashMultimap&lt;/td&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td&gt;LinkedHashSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableSetMultimap&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;td&gt;ImmutableSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeMultimap&lt;/td&gt;
&lt;td&gt;TreeMap&lt;/td&gt;
&lt;td&gt;TreeSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;其实现类的继承关系图如下:
&lt;img src=&quot;/static/images/multimap.png&quot; alt=&quot;Multimap继承关系图&quot; title=&quot;Multimap继承关系图&quot;&gt;&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Tue, 17 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-17-Guava%E6%96%B0%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-17-Guava%E6%96%B0%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava之Ordering</title>
        <description>&lt;p&gt;guava的collection包里有个&lt;code class=&quot;prettyprint&quot;&gt;Ordering&lt;/code&gt;抽象类实现了&lt;code class=&quot;prettyprint&quot;&gt;java.util.Comparator&lt;/code&gt;接口&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;Comparator&lt;/code&gt;就俩方法&lt;code class=&quot;prettyprint&quot;&gt;int compare(T o1, T o2);&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;boolean equals(Object obj);&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;Ordering&lt;/code&gt;提供了更多的方法来完成集合排序的功能&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;静态方法&quot;&gt;静态方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;C&amp;gt; natural()&lt;/code&gt;: 返回自然顺序的比较器, 如数字按大小，日期按先后&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;T&amp;gt; from(Comparator&amp;lt;T&amp;gt; comparator)&lt;/code&gt;: 把给定的Comparator转化为排序器&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;Object&amp;gt; usingToString()&lt;/code&gt;: 按对象的字符串形式做字典排序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;T&amp;gt; compound(Iterable comparators)&lt;/code&gt;: 合成多个比较器, 类似于实例方法的那个&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;Object&amp;gt; allEqual()&lt;/code&gt;: 返回一个认为全都相等的比较器, 相当于没有排序.
它的意义在于返回一个比较器, 这样就可以使用一些实例方法了, 从而进行链式比较,
比如:&lt;code class=&quot;prettyprint&quot;&gt;Ordering.allEqual().nullsLast().sortedCopy(asList(t, null, e, s, null, t, null))}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;实例方法:链式调用&quot;&gt;实例方法:链式调用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;S&amp;gt; reverse()&lt;/code&gt;: 返回反序比较器&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;S&amp;gt; nullsFirst()&lt;/code&gt;: 使用当前排序器, 但额外把&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;放到最前面&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;S&amp;gt; nullsLast()&lt;/code&gt;: 使用当前排序器, 但额外把&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;放到最后面&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;U&amp;gt; compound(Comparator second)&lt;/code&gt;: 合成比较器, 先按原来排序，然后按second排序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;F&amp;gt; onResultOf(Function&amp;lt;F, T&amp;gt; function)&lt;/code&gt;: 对集合中元素调用Function，再按返回值用当前排序器排序.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看下面这个链式调用的例子, 应该从后往前读, 先调用apply方法获取Foo的name值, 在把null放前面, 再对剩下的按照name的自然顺序进行排序&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Ordering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ordering&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ordering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;natural&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nullsFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onResultOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;实例方法:操作集合元素的方法&quot;&gt;实例方法:操作集合元素的方法&lt;/h2&gt;

&lt;p&gt;注:后面说的大小是指排序的前后&lt;/p&gt;

&lt;h3 id=&quot;min():-返回最小的那个元素,-重载方法有&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;min()&lt;/code&gt;: 返回最小的那个元素, 重载方法有&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E min(Iterator&amp;lt;E&amp;gt; iterator)&lt;/code&gt;: 迭代器空则抛出&lt;code class=&quot;prettyprint&quot;&gt;NoSuchElementException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E min(Iterable&amp;lt;E&amp;gt; iterable)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E min(E a, E b)&lt;/code&gt;: 相等则返回第一个&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E min(E a,  E b, E c, E... rest)&lt;/code&gt;: 多个最小则返回第一个最小的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;max():-返回最大的那个元素,-重载方法有&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;max()&lt;/code&gt;: 返回最大的那个元素, 重载方法有&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E max(Iterator&amp;lt;E&amp;gt; iterator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E max(Iterable&amp;lt;E&amp;gt; iterable)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E max(E a, E b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E max(E a,  E b, E c, E... rest)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;leastof():-返回最小的k个元素的列表,-不足k个则都返回&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;leastOf()&lt;/code&gt;: 返回最小的k个元素的列表, 不足k个则都返回&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;E&amp;gt; leastOf(Iterable&amp;lt;E&amp;gt; iterable, int k)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;E&amp;gt; leastOf(Iterator&amp;lt;E&amp;gt; elements, int k)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;greatestof():-返回最大的k个元素的列表,-不足k个则都返回&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;greatestOf()&lt;/code&gt;: 返回最大的k个元素的列表, 不足k个则都返回&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;E&amp;gt; greatestOf(Iterable&amp;lt;E&amp;gt; iterable, int k)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;E&amp;gt; greatestOf(Iterator&amp;lt;E&amp;gt; elements, int k)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;判断是否已经按照排序器排过序&quot;&gt;判断是否已经按照排序器排过序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean isOrdered(Iterable iterable)&lt;/code&gt;: 允许有排序值相等的元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean isStrictlyOrdered(Iterable iterable)&lt;/code&gt;: 严格递增, 不允许有相等的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;返回排序好的list&quot;&gt;返回排序好的list&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;E&amp;gt; sortedCopy(Iterable&amp;lt;E&amp;gt; elements)&lt;/code&gt;: 返回可变的已经排好序的list&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;ImmutableList&amp;lt;E&amp;gt; immutableSortedCopy(Iterable&amp;lt;E&amp;gt; elements)&lt;/code&gt;: 返回不可变的已经排好序的list&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Mon, 16 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-16-Guava%E4%B9%8BOrdering.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-16-Guava%E4%B9%8BOrdering.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Collections工具类</title>
        <description>&lt;p&gt;JDK的Collections类中提供了大量对Collection和Map的操作,网上资料整理记录下来&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;排序操作(主要对list)&quot;&gt;排序操作(主要对List)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void sort(List list)&lt;/code&gt;: 对List里的元素根据自然升序排序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void sort(List list, Comparator c)&lt;/code&gt;: 自定义比较器排序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void reverse(List list)&lt;/code&gt;: 反转指定List集合中元素的顺序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void shuffle(List list)&lt;/code&gt;: 打乱List中元素的顺序(重新洗牌)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void swap(List list, int i, int j)&lt;/code&gt;: 交换list中的两个元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void swap(Object[] arr, int i, int j)&lt;/code&gt;: 交换数组中的两个元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void rotate(List list, int distance)&lt;/code&gt;: 所有元素循环右移distance位, distance=size则相当于没变&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;查找和替换(主要对collection接口)&quot;&gt;查找和替换(主要对Collection接口)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int binarySearch(List list, T key)&lt;/code&gt;: 二分搜索法, 返回对象在List中的索引, 前提是集合已经排序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void fill(List list, T obj)&lt;/code&gt;: 填充对象&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean replaceAll(List list, T oldVal, T newVal)&lt;/code&gt;: 替换, 返回是否含有要替换的元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;T min(Collection coll)&lt;/code&gt;: 返回最小元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;T min(Collection coll, Comparator comp)&lt;/code&gt;: 根据自定义比较器，返回最小元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;T max(Collection coll)&lt;/code&gt;: 返回最大元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;T max(Collection coll, Comparator comp)&lt;/code&gt;: 根据自定义比较器，返回最大元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int frequency(Collection c, Object o)&lt;/code&gt;: 返回指定对象在集合中出现的次数&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;其他操作&quot;&gt;其他操作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean addAll(Collection c, T... elements)&lt;/code&gt;: 把elements添加到集合里&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Comparator reverseOrder()&lt;/code&gt;: 返回自然顺序的反序比较器&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Comparator reverseOrder(Comparator cmp)&lt;/code&gt;: 返回cmp的逆序比较器, 若cmp为null则等同于&lt;code class=&quot;prettyprint&quot;&gt;reverseOrder()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Fri, 13 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-13-Collections%E5%B7%A5%E5%85%B7%E7%B1%BB.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-13-Collections%E5%B7%A5%E5%85%B7%E7%B1%BB.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Map整理</title>
        <description>&lt;p&gt;整理了下Java中Map的结构画了个图, 虚线表示接口, 实线表示类&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;map继承关系图&quot;&gt;Map继承关系图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/map.png&quot; alt=&quot;Map继承关系图&quot; title=&quot;Map结构图&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;map基本操作&quot;&gt;Map基本操作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int size()&lt;/code&gt;: 返回map大小&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean isEmpty()&lt;/code&gt;: 是否为空Map&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsKey(Object key)&lt;/code&gt;: 是否包含key&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsValue(Object value)&lt;/code&gt;: 是否包含value&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;V get(Object key)&lt;/code&gt;: 返回key对应的value, 没有则返回&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;V put(K key, V value)&lt;/code&gt;: key和value都可为null, key重复则替换旧的value&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void putAll(Map&amp;lt;? extends K, ? extends V&amp;gt; m)&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;V remove(Object key)&lt;/code&gt;: 移除并返回, 若不包含key返回null&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void clear()&lt;/code&gt;: 清空map&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;K&amp;gt; keySet()&lt;/code&gt;: 返回key的集合&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; values()&lt;/code&gt;: 返回value的集合&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; entrySet()&lt;/code&gt;: 返回Entry集合&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;hashmap与hashtable&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;HashMap&lt;/code&gt;与&lt;code class=&quot;prettyprint&quot;&gt;HashTable&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hashtable是线程安全的，而HashMap不是线程安全的&lt;/li&gt;
&lt;li&gt;Hashtable不允许null作为key和value，而HashMap则可以使用null作为key和value&lt;/li&gt;
&lt;li&gt;Hashtable很古老, 从JDK1.0就有了, 不建议使用&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;hashmap与identityhashmap&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;HashMap&lt;/code&gt;与&lt;code class=&quot;prettyprint&quot;&gt;IdentityHashMap&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;IdentityHashMap&lt;/code&gt;认为两个key相等: 两个key严格相等(&lt;code class=&quot;prettyprint&quot;&gt;key1 == key2&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;HashMap&lt;/code&gt;则认为两个key相等: &lt;code class=&quot;prettyprint&quot;&gt;key1.equals(key2)&lt;/code&gt;且&lt;code class=&quot;prettyprint&quot;&gt;hashCode&lt;/code&gt;相同&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;linkedhashmap&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;LinkedHashMap&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;LinkedHashMap&lt;/code&gt;可以记住key-value对的添加时的顺序&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;sortedmap接口和treemap&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;SortedMap&lt;/code&gt;接口和&lt;code class=&quot;prettyprint&quot;&gt;TreeMap&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;内置比较器(&lt;code class=&quot;prettyprint&quot;&gt;Comparator&lt;/code&gt;),可比较前后顺序, &lt;code class=&quot;prettyprint&quot;&gt;TreeMap&lt;/code&gt;默认按照自然顺序排序, 不允许null作为key&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;enummap&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;EnumMap&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;EnumMap&lt;/code&gt;只接受枚举类作为key, 不允许null作为key&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;properties&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;Properties&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Properties&lt;/code&gt;继承&lt;code class=&quot;prettyprint&quot;&gt;HashTable&lt;/code&gt;, 还有几个其他常用方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String getProperty(String key)&lt;/code&gt;: 获取指定key对应的value值&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String getProperty(String key, String defaultValue)&lt;/code&gt;: 有默认值&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Object setProperty(String key, String value)&lt;/code&gt;: 调用&lt;code class=&quot;prettyprint&quot;&gt;Hashtable&lt;/code&gt;的put方法.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void load(InputStream inStream)&lt;/code&gt;: 从属性文件加载key-value对&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void store(OutputStream out, String comments)&lt;/code&gt;: 将当前的所有key-value对输出到指定属性文件,小心乱码&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;loadFromXML(InputStream in)&lt;/code&gt;: 从XML中加载配置&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;storeToXML(OutputStream os, String comment)&lt;/code&gt;: 写到XML文件中&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;storeToXML(OutputStream os, String comment, String encoding)&lt;/code&gt;: 写到XML中, 可以指定编码&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;map的选择&quot;&gt;Map的选择&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;若要保留插入时的顺序, 可用&lt;code class=&quot;prettyprint&quot;&gt;LinkedHashMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若要求key完全匹配(同一对象)，可用&lt;code class=&quot;prettyprint&quot;&gt;IdentityHashMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若要排序,可用&lt;code class=&quot;prettyprint&quot;&gt;TreeMap&lt;/code&gt;, 它在底层采用红黑树来管理key-value对&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;关于null&quot;&gt;关于&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Hashtable&lt;/code&gt;的key、value均不能为null&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;TreeMap&lt;/code&gt;与&lt;code class=&quot;prettyprint&quot;&gt;EnumMap&lt;/code&gt;不允许key为null&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;HashMap&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;IdentityHashMap&lt;/code&gt;key可以为null, 但不建议这样做&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Thu, 12 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Map%E6%95%B4%E7%90%86.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Map%E6%95%B4%E7%90%86.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Collection的toArray方法</title>
        <description>&lt;p&gt;Java中Collection的有两个toArray方法:&lt;code class=&quot;prettyprint&quot;&gt;Object[] toArray()&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;T&amp;gt; T[] toArray(T[] a)&lt;/code&gt;&lt;br&gt;
后面那个范型方法略难懂, 整理时发现些比较屌的地方,记录下来&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;T&amp;gt; T[] toArray(T[] a)&lt;/code&gt;方法在抽象类&lt;code class=&quot;prettyprint&quot;&gt;AbstractCollection&lt;/code&gt;中有个实现&lt;br&gt;
该方法也是把集合转成数组, 你可以指定转成什么类型的数组,若转换的类型与集合中元素类型不一样,会抛&lt;code class=&quot;prettyprint&quot;&gt;ArrayStoreException&lt;/code&gt;.&lt;br&gt;
关于参数的写法上, 这个数组a可以是空的, 也可以不空, 会有不同的效果, 看下面代码:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 先创建一个集合&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 可以这么写, 长度为0, 只表示转成什么类型, 在内部还会创建一个长度为5的数组&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 也可以这么写, 长度是集合的size, 在内部会把集合里的元素放到这个传参时创建的数组&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()]);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 还可以这么写, 长度大于集合的size, 在内部会把集合里的元素放到这个传参时创建的数组, 后面多出来的3(8-5)个位置填充null&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 无论哪种方式, 如果传入的类型与即集合里元素的类型不匹配, 就会抛出ArrayStoreException&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;仔细看下JDK1.7的源码, 发现也很腹黑:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 仔细想了下, 貌似这俩else分支根本不会被执行&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                             &lt;span class=&quot;c1&quot;&gt;// 但人家可是JDK里的源码呀, 不可能出错吧!&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arraycopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finishToArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码里注释中提的问题我想了好久, 我考虑的情况都是正常情况, 在并发环境中, 集合里的元素有可能会被其他线程remove掉,
这就造成了iterator迭代出的元素个数小于size的情况, 注释里的那俩else就会被执行到了!&lt;br&gt;
 JDK源码写的还真是考虑周到啊...&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Thu, 12 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Collection%E7%9A%84toArray%E6%96%B9%E6%B3%95.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Collection%E7%9A%84toArray%E6%96%B9%E6%B3%95.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Collection整理</title>
        <description>&lt;p&gt;Java中Collection的继承关系图, 虚线表示接口, 实线表示类&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;collection继承关系图&quot;&gt;Collection继承关系图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/collection.png&quot; alt=&quot;Collection继承关系图&quot; title=&quot;Collection结构图&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;collection基本操作&quot;&gt;Collection基本操作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int size()&lt;/code&gt;: 返回集合大小&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean isEmpty()&lt;/code&gt;: 是否为空&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Iterator&amp;lt;E&amp;gt; iterator()&lt;/code&gt;: 返回迭代器&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Object[] toArray()&lt;/code&gt;: 把集合转成数组&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;T&amp;gt; T[] toArray(T[] a)&lt;/code&gt;: 这个腹黑的方法详细说明看&lt;a href=&quot;/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Collection%E7%9A%84toArray%E6%96%B9%E6%B3%95.html&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean contains(Object o)&lt;/code&gt;: 是否包含该对象&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsAll(Collection&amp;lt;?&amp;gt; c)&lt;/code&gt;: 包含c里的全部元素则返回true&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean add(E e)&lt;/code&gt;: 添加成功改变了集合则返回true&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean addAll(Collection&amp;lt;? extends E&amp;gt; c)&lt;/code&gt;: 全部添加&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean remove(E e)&lt;/code&gt;: 移除元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean removeAll(Collection&amp;lt;?&amp;gt; c)&lt;/code&gt;: 相当于减集合c&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean retainAll(Collection&amp;lt;?&amp;gt; c)&lt;/code&gt;: 相当于求与c的交集&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void clear()&lt;/code&gt;: 清空集合&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;set接口&quot;&gt;Set接口&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Set不允许包含相同的元素, 而判断两个对象是否相同则是根据&lt;code class=&quot;prettyprint&quot;&gt;equals&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;HashSet&lt;/code&gt;不是同步的, 不能保证元素的排列顺序, 注意&lt;code class=&quot;prettyprint&quot;&gt;hashCode&lt;/code&gt;方法的实现&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;LinkedHashSet&lt;/code&gt;根据元素的&lt;code class=&quot;prettyprint&quot;&gt;hashCode&lt;/code&gt;值来决定元素的存储位置，但它同时使用链表维护元素的次序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;TreeSet&lt;/code&gt;是&lt;code class=&quot;prettyprint&quot;&gt;SortedSet&lt;/code&gt;接口的实现类, 有顺序, 可自定义比较器(&lt;code class=&quot;prettyprint&quot;&gt;Comparator&lt;/code&gt;),有&lt;code class=&quot;prettyprint&quot;&gt;first、last、lower、higher&lt;/code&gt;等方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list接口&quot;&gt;List接口&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&lt;/code&gt;是经常用到的工具, 是有序集合, 增加了与索引位置相关的操作:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E get(int index)&lt;/code&gt;: 获取指定位置的元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E set(int index, E element)&lt;/code&gt;: 替换指定位置的元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void add(int index, E element)&lt;/code&gt;: 将元素添加到指定位置&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean addAll(int index, Collection&amp;lt;? extends E&amp;gt; c)&lt;/code&gt;: 将c里的元素添加到指定位置&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E remove(int index)&lt;/code&gt;: 移除指定位置的元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int indexOf(Object o)&lt;/code&gt;: o在list中第一次出现的位置&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int lastIndexOf(Object o)&lt;/code&gt;: o在list中最后一次出现的位置&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;E&amp;gt; subList(int fromIndex, int toIndex)&lt;/code&gt;: 子list&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arraylist和vector&quot;&gt;ArrayList和Vector&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;ArrayList&lt;/code&gt;是线程不安全的,而&lt;code class=&quot;prettyprint&quot;&gt;Vector&lt;/code&gt;是线程安全的  &lt;/p&gt;

&lt;h3 id=&quot;stack&quot;&gt;Stack&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Stack&lt;/code&gt;是&lt;code class=&quot;prettyprint&quot;&gt;Vector&lt;/code&gt;的子类,模拟数据结构中的栈,有下面几个操作:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E push(E item)&lt;/code&gt;: 压栈&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E pop()&lt;/code&gt;: 出栈&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E peek()&lt;/code&gt;: 查看栈顶元素, 不出栈&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean empty()&lt;/code&gt;: 判断栈空&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int search(Object o)&lt;/code&gt;: 返回元素位置, 栈顶元素是1, －1表示栈里没有&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;queue接口&quot;&gt;Queue接口&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Queue&lt;/code&gt;用于模拟队列这种数据结构，实现先进先出&lt;q&gt;FIFO&lt;/q&gt;等数据结构,常用如下操作:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean add(E e)&lt;/code&gt;: 不建议使用&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean offer(E e)&lt;/code&gt;: 将指定元素插入队尾列,当使用有容量限制的队列时,此方法通常要优于&lt;code class=&quot;prettyprint&quot;&gt;add(E)&lt;/code&gt;,
后者可能无法插入元素，而只是抛出一个异常。&lt;strong&gt;推荐使用此方法取代add&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean remove()&lt;/code&gt;: 不建议使用&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean poll()&lt;/code&gt;: 获取头部元素并且删除元素，队列为空返回null;&lt;strong&gt;推荐使用此方法取代remove&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean element()&lt;/code&gt;: 返回队首元素, 队空抛&lt;code class=&quot;prettyprint&quot;&gt;NoSuchElementException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean peek()&lt;/code&gt;: 返回队首元素, 队空返回&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;priorityqueue类&quot;&gt;PriorityQueue类&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;PriorityQueue&lt;/code&gt;类中元素的顺序不是按照加入的顺序排列的, 而是按队列元素的优先级重新排序,
调用&lt;code class=&quot;prettyprint&quot;&gt;peek()&lt;/code&gt;或者是&lt;code class=&quot;prettyprint&quot;&gt;poll()&lt;/code&gt;方法时，返回的是队列中优先级最小的元素, 可以自定义排序.&lt;/p&gt;

&lt;h3 id=&quot;deque接口与arraydeque类&quot;&gt;Deque接口与ArrayDeque类&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Deque&lt;/code&gt;代表一个双端队列，可以当作一个双端队列使用，也可以当作“栈”来使用，因为它包含出栈&lt;code class=&quot;prettyprint&quot;&gt;pop()&lt;/code&gt;与入栈&lt;code class=&quot;prettyprint&quot;&gt;push()&lt;/code&gt;方法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void addFirst(E e)&lt;/code&gt;: 元素增加至队头, 超容量抛异常&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void addLast(E e)&lt;/code&gt;: 元素增加至队尾, 超容量抛异常&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean offerFirst(E e)&lt;/code&gt;: 元素增加至队头, 比add安全&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean offerLast(E e)&lt;/code&gt;: 元素增加至队尾, 比add安全&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E removeFirst()&lt;/code&gt;: 获取并删除队头元素, 队空抛&lt;code class=&quot;prettyprint&quot;&gt;NoSuchElementException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E removeLast()&lt;/code&gt;: 获取并删除队尾元素, 队空抛&lt;code class=&quot;prettyprint&quot;&gt;NoSuchElementException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E pollFirst()&lt;/code&gt;: 获取并删除队头元素, 队空返回&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E pollLast()&lt;/code&gt;: 获取并删除队尾元素, 队空返回&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E getFirst()&lt;/code&gt;: 获取队头元素, 但不删除, 队空抛&lt;code class=&quot;prettyprint&quot;&gt;NoSuchElementException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E getLast()&lt;/code&gt;: 获取队头元素, 但不删除, 队空抛&lt;code class=&quot;prettyprint&quot;&gt;NoSuchElementException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E peekFirst()&lt;/code&gt;: 获取队头元素, 但不删除, 队空返回&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E peekLast()&lt;/code&gt;: 获取队头元素, 但不删除, 队空返回&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void push(E e)&lt;/code&gt;: 元素增加至队头, 类似&lt;code class=&quot;prettyprint&quot;&gt;offerFirst&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E pop()&lt;/code&gt;: 元素增加至队头, 类似&lt;code class=&quot;prettyprint&quot;&gt;pollFirst&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linkedlist&quot;&gt;LinkedList&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;LinkedList&lt;/code&gt;类同时实现了&lt;code class=&quot;prettyprint&quot;&gt;List&lt;/code&gt;接口和&lt;code class=&quot;prettyprint&quot;&gt;Deque&lt;/code&gt;接口, 因此它也可以当做一个双端队列来用, 也可以当作“栈”来使用.&lt;br&gt;
它基于链表实现, 随机访问性能较差, 但插入与删除操作性能很好&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Thu, 12 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Collection%E6%95%B4%E7%90%86.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Collection%E6%95%B4%E7%90%86.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava之Preconditions</title>
        <description>&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Preconditions&lt;/code&gt;用于各种条件检查, 在Guava的&lt;code class=&quot;prettyprint&quot;&gt;com.google.common.base&lt;/code&gt;包中&lt;br&gt;
它提供了几个静态方法, 不满足条件时会抛出异常&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;checknotnull&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;checkNotNull&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;函数声明: &lt;code class=&quot;prettyprint&quot;&gt;public static &amp;lt;T&amp;gt; T checkNotNull(T reference)&lt;/code&gt;&lt;br&gt;
函数功能: 检查参数不为空, 否则抛出&lt;code class=&quot;prettyprint&quot;&gt;NullPointerException&lt;/code&gt;&lt;br&gt;
应用场景: 判断对象不为null&lt;br&gt;
有三个重载函数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;checkNotNull(T reference)&lt;/li&gt;
&lt;li&gt;checkNotNull(T reference, Object errorMessage)&lt;/li&gt;
&lt;li&gt;checkNotNull(T reference, String errorMessageTemplate, Object... errorMessageArgs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第二个可自定义错误描述，第三个可以使用模板,如&lt;code class=&quot;prettyprint&quot;&gt;(&amp;quot;Age is %s&amp;quot;, 18)&lt;/code&gt;等&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;checkargument&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;checkArgument&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;函数声明: &lt;code class=&quot;prettyprint&quot;&gt;public static void checkArgument(boolean expression)&lt;/code&gt;&lt;br&gt;
函数功能: 检查参数表达式是否为true, 为false时抛出&lt;code class=&quot;prettyprint&quot;&gt;IllegalArgumentException&lt;/code&gt;&lt;br&gt;
应用场景: 判断表达式真假, 如&lt;code class=&quot;prettyprint&quot;&gt;age &amp;gt; 18&lt;/code&gt;&lt;br&gt;
同样有三个重载函数&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;checkstate&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;checkState&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;函数声明: &lt;code class=&quot;prettyprint&quot;&gt;public static void checkState(boolean expression)&lt;/code&gt;&lt;br&gt;
函数功能: 检查参数不为空, 否则抛出&lt;code class=&quot;prettyprint&quot;&gt;IllegalStateException&lt;/code&gt;&lt;br&gt;
应用场景: 判断表达式真假, 常用于不依赖参数的判断, 如&lt;code class=&quot;prettyprint&quot;&gt;Iterator.next()&lt;/code&gt;&lt;br&gt;
同样有三个重载函数&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;checkelementindex&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;checkElementIndex&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;函数声明: &lt;code class=&quot;prettyprint&quot;&gt;public static int checkElementIndex(int index, int size)&lt;/code&gt;&lt;br&gt;
函数功能: 检查index范围属于[0, size), 否则抛出&lt;code class=&quot;prettyprint&quot;&gt;IndexOutOfBoundsException&lt;/code&gt;&lt;br&gt;
应用场景: 一个List只传入&lt;code class=&quot;prettyprint&quot;&gt;list.size()&lt;/code&gt;和要判断的下标即可&lt;br&gt;
有两个重载函数:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;checkElementIndex(int index, int size)&lt;/li&gt;
&lt;li&gt;checkElementIndex(int index, int size, String desc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第二个可以自己写描述, 如传入的是(5, 3, &lt;q&gt;index&lt;/q&gt;)描述将是&lt;q&gt;index (4) must not be greater than size (3)&lt;/q&gt;&lt;br&gt;
第一个默认是&lt;q&gt;index&lt;/q&gt;的描述&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;checkpositionindex&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;checkPositionIndex&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;函数声明: &lt;code class=&quot;prettyprint&quot;&gt;public static int checkPositionIndex(int index, int size)&lt;/code&gt;&lt;br&gt;
函数功能: 检查index范围属于[0, size], 否则抛出&lt;code class=&quot;prettyprint&quot;&gt;IndexOutOfBoundsException&lt;/code&gt;&lt;br&gt;
应用场景: 我还在想&lt;br&gt;
也有有两个重载函数同上&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;checkpositionindexes&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;checkPositionIndexes&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;函数声明: &lt;code class=&quot;prettyprint&quot;&gt;public static void checkPositionIndexes(int start, int end, int size)&lt;/code&gt;&lt;br&gt;
函数功能: 检查 start和end属于[0, size]且start&amp;lt;=end, 否则抛出&lt;code class=&quot;prettyprint&quot;&gt;IndexOutOfBoundsException&lt;/code&gt;  &lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Wed, 11 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-11-Guava%E4%B9%8BPreconditions.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-11-Guava%E4%B9%8BPreconditions.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava之Optional</title>
        <description>&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Optional&lt;/code&gt;用于处理有可能为&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;的情况,在Guava的&lt;code class=&quot;prettyprint&quot;&gt;com.google.common.base&lt;/code&gt;包中&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;Optional&lt;/code&gt;是一个抽象类，有两个&lt;code class=&quot;prettyprint&quot;&gt;final&lt;/code&gt;的子类:&lt;code class=&quot;prettyprint&quot;&gt;Present&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;Absent&lt;/code&gt;&lt;br&gt;
使用的时候直接用&lt;code class=&quot;prettyprint&quot;&gt;Optional&lt;/code&gt;即可, 不用关心&lt;code class=&quot;prettyprint&quot;&gt;Present&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;Absent&lt;/code&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;静态方法&quot;&gt;静态方法&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Optional&lt;/code&gt;有三个常用的静态方法:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Optional.of(T reference): 返回的是一个&lt;code class=&quot;prettyprint&quot;&gt;Present&lt;/code&gt;对象, 表示不能为&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;, 当&lt;code class=&quot;prettyprint&quot;&gt;reference&lt;/code&gt;为&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;时直接抛&lt;code class=&quot;prettyprint&quot;&gt;NullPointerException&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Optional.absent(): 返回的是一个&lt;code class=&quot;prettyprint&quot;&gt;final&lt;/code&gt;的&lt;code class=&quot;prettyprint&quot;&gt;Absent&lt;/code&gt;对象, 表示&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Optional.fromNullable(T nullableReference): 返回的可能是&lt;code class=&quot;prettyprint&quot;&gt;Present&lt;/code&gt;或者&lt;code class=&quot;prettyprint&quot;&gt;Absent&lt;/code&gt;, 表示对象肯能为&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;, 即参数为&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;时等同于&lt;code class=&quot;prettyprint&quot;&gt;absent()&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h2 id=&quot;实例方法&quot;&gt;实例方法&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;boolean isPresent( ): Optional包含的T实例不为&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;，则返回true&lt;/li&gt;
&lt;li&gt;T get( ): 返回包含实例, 若包含的实例为&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;则抛出&lt;code class=&quot;prettyprint&quot;&gt;IllegalStateException&lt;/code&gt;异常&lt;/li&gt;
&lt;li&gt;T or(T defaultValue): &lt;code class=&quot;prettyprint&quot;&gt;a.or(b)&lt;/code&gt;a不为null返回a, 否则返回b, b为&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;时抛出&lt;code class=&quot;prettyprint&quot;&gt;NullPointerException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;T orNull( ): &lt;code class=&quot;prettyprint&quot;&gt;a.orNull()&lt;/code&gt;a不为null返回a, 否则返回null, 逆操作是&lt;code class=&quot;prettyprint&quot;&gt;fromNullable()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;
</description>
        <pubDate>Wed, 11 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-11-Guava%E4%B9%8BOptional.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-11-Guava%E4%B9%8BOptional.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava之Objects</title>
        <description>&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Objects&lt;/code&gt;在Guava的&lt;code class=&quot;prettyprint&quot;&gt;com.google.common.base&lt;/code&gt;包中&lt;br&gt;
JDK7已经把Objects收录在了&lt;code class=&quot;prettyprint&quot;&gt;java.util.Objects&lt;/code&gt;里, 现在可以直接用啦&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;equals&quot;&gt;equals&lt;/h2&gt;

&lt;p&gt;看实现代码， 不用担心空指针了&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;hashcode和hash&quot;&gt;hashCode和hash&lt;/h2&gt;

&lt;p&gt;首先&lt;code class=&quot;prettyprint&quot;&gt;hashCode(Object o)&lt;/code&gt;不用担心空指针&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外还有个&lt;code class=&quot;prettyprint&quot;&gt;hash(Object... values)&lt;/code&gt;方法非常好用，可以传多个对象进去得到hash值, 比如可以这样用:&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;Objects.hashCode(field1, field2, ..., fieldn)&lt;/code&gt;&lt;br&gt;
来个例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4066&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4096&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;tostring&quot;&gt;toString&lt;/h2&gt;

&lt;p&gt;有两个方法&lt;code class=&quot;prettyprint&quot;&gt;toString(Object o)&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;toString(Object o, String nullDefault)&lt;/code&gt;, 代码如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 如果传null则返回字符串&amp;quot;null&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 这个可以自己指定为null时返回什么&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;requirenonnull&quot;&gt;requireNonNull&lt;/h2&gt;

&lt;p&gt;还有两个判空方法&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 直接抛空指针异常&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NullPointerException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 可以自定义异常描述&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NullPointerException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Tue, 10 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-10-Guava%E4%B9%8BObjects.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-10-Guava%E4%B9%8BObjects.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>正则表达式</title>
        <description>&lt;p&gt;正则表达式收集整理&lt;/p&gt;

&lt;hr&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;字符&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;\&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;转义符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;\n&lt;/code&gt;匹配换行符。&lt;code class=&quot;prettyprint&quot;&gt;\\&lt;/code&gt;匹配&lt;code class=&quot;prettyprint&quot;&gt;\&lt;/code&gt;，&lt;code class=&quot;prettyprint&quot;&gt;\(&lt;/code&gt;匹配&lt;code class=&quot;prettyprint&quot;&gt;(&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;匹配输入字符串开始的位置&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;匹配输入字符串结尾的位置&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;零次或多次匹配前面的字符或子表达式&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;zo*&lt;/code&gt; 匹配&lt;code class=&quot;prettyprint&quot;&gt;z&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;zoo&lt;/code&gt;; &lt;br&gt;&lt;code class=&quot;prettyprint&quot;&gt;*&lt;/code&gt; 等效于 &lt;code class=&quot;prettyprint&quot;&gt;{0,}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;一次或多次匹配前面的字符或子表达式&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;zo+&lt;/code&gt; 匹配&lt;code class=&quot;prettyprint&quot;&gt;zo&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;zoo&lt;/code&gt;,但与&lt;code class=&quot;prettyprint&quot;&gt;z&lt;/code&gt;不匹配; &lt;br&gt;&lt;code class=&quot;prettyprint&quot;&gt;+&lt;/code&gt; 等效于 &lt;code class=&quot;prettyprint&quot;&gt;{1,}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;零次或一次匹配前面的字符或子表达式&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;do(es)?&lt;/code&gt;匹配&lt;code class=&quot;prettyprint&quot;&gt;do&lt;/code&gt;或&lt;code class=&quot;prettyprint&quot;&gt;does&lt;/code&gt;; &lt;br&gt;&lt;code class=&quot;prettyprint&quot;&gt;?&lt;/code&gt; 等效于 &lt;code class=&quot;prettyprint&quot;&gt;{0,1}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;{n}&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;n 是非负整数, 正好匹配 n 次&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;o{2}&lt;/code&gt;与&lt;code class=&quot;prettyprint&quot;&gt;Bob&lt;/code&gt;中的&lt;code class=&quot;prettyprint&quot;&gt;o&lt;/code&gt;不匹配，但与&lt;code class=&quot;prettyprint&quot;&gt;food&lt;/code&gt;中的两个&lt;code class=&quot;prettyprint&quot;&gt;o&lt;/code&gt;匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;{n,}&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;至少匹配 n 次&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;o{2,}&lt;/code&gt;不匹配&lt;code class=&quot;prettyprint&quot;&gt;Bob&lt;/code&gt;中的&lt;code class=&quot;prettyprint&quot;&gt;o&lt;/code&gt;, 但匹配&lt;code class=&quot;prettyprint&quot;&gt;foooood&lt;/code&gt;中的所有&lt;code class=&quot;prettyprint&quot;&gt;o&lt;/code&gt;; &lt;br&gt;&lt;code class=&quot;prettyprint&quot;&gt;o{1,}&lt;/code&gt;等效于&lt;code class=&quot;prettyprint&quot;&gt;o+&lt;/code&gt;; &lt;code class=&quot;prettyprint&quot;&gt;o{0,}&lt;/code&gt;等效于&lt;code class=&quot;prettyprint&quot;&gt;o*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;{n,m}&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;n &amp;lt;= m, 匹配至少 n 次，至多 m 次&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;o{1,3}&lt;/code&gt;匹配&lt;code class=&quot;prettyprint&quot;&gt;fooooood&lt;/code&gt;中的头三个 &lt;code class=&quot;prettyprint&quot;&gt;o&lt;/code&gt;; &lt;br&gt;&lt;code class=&quot;prettyprint&quot;&gt;o{0,1}&lt;/code&gt; 等效于 &lt;code class=&quot;prettyprint&quot;&gt;o?&lt;/code&gt;; &lt;br&gt;注意:不能将空格插入逗号和数字之间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;非贪心匹配, 匹配尽可能短的字符串;&lt;br&gt;常跟在&lt;code class=&quot;prettyprint&quot;&gt;*、+、?、{n}、{n,}、{n,m}&lt;/code&gt;等之后&lt;br&gt;默认是“贪心的”, 匹配可能长的字符串&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;在字符串&lt;code class=&quot;prettyprint&quot;&gt;oooo&lt;/code&gt;中，&lt;code class=&quot;prettyprint&quot;&gt;o+?&lt;/code&gt;只匹配单个&lt;code class=&quot;prettyprint&quot;&gt;o&lt;/code&gt;,而&lt;code class=&quot;prettyprint&quot;&gt;o+&lt;/code&gt;匹配所有&lt;code class=&quot;prettyprint&quot;&gt;o&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;.&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;匹配除&lt;q&gt;\n&lt;/q&gt;之外的任何单个字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;若要匹配包括&lt;q&gt;\n&lt;/q&gt;在内的任意字符，请使用&lt;code class=&quot;prettyprint&quot;&gt;[\s\S]&lt;/code&gt;之类的模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;(pattern)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;匹配&lt;code class=&quot;prettyprint&quot;&gt;pattern&lt;/code&gt;并捕获该匹配的子表达式 &lt;br&gt;可以使用 &lt;code class=&quot;prettyprint&quot;&gt;$0&lt;/code&gt;…&lt;code class=&quot;prettyprint&quot;&gt;$9&lt;/code&gt; 获取匹配结果&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;若要匹配括号字符 &lt;code class=&quot;prettyprint&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;prettyprint&quot;&gt;)&lt;/code&gt;, 请使用&lt;code class=&quot;prettyprint&quot;&gt;\(&lt;/code&gt;&lt;code class=&quot;prettyprint&quot;&gt;\)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;x｜y&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;匹配 &lt;code class=&quot;prettyprint&quot;&gt;x&lt;/code&gt; 或 &lt;code class=&quot;prettyprint&quot;&gt;y&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;z｜food&lt;/code&gt; 匹配&lt;code class=&quot;prettyprint&quot;&gt;z&lt;/code&gt;或&lt;code class=&quot;prettyprint&quot;&gt;food&lt;/code&gt;。&lt;code class=&quot;prettyprint&quot;&gt;(z｜f)ood&lt;/code&gt; 匹配&lt;code class=&quot;prettyprint&quot;&gt;zood&lt;/code&gt;或&lt;code class=&quot;prettyprint&quot;&gt;food&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[xyz]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;字符集. 匹配包含的任一字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[abc]&lt;/code&gt;匹配&lt;code class=&quot;prettyprint&quot;&gt;plain&lt;/code&gt;中的&lt;code class=&quot;prettyprint&quot;&gt;a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[^xyz]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;反向字符集. 匹配未包含的任何单个字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[^abc]&lt;/code&gt;匹配&lt;code class=&quot;prettyprint&quot;&gt;plain&lt;/code&gt;中的&lt;code class=&quot;prettyprint&quot;&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[a-z]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;字符范围. 匹配指定范围内的任何字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[a-z]&lt;/code&gt;匹配&lt;code class=&quot;prettyprint&quot;&gt;a&lt;/code&gt;到&lt;code class=&quot;prettyprint&quot;&gt;z&lt;/code&gt;范围内的任何小写字母&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[^a-z]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;反向字符范围. 匹配不在指定范围内的任何字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[^a-z]&lt;/code&gt;匹配不在&lt;code class=&quot;prettyprint&quot;&gt;a&lt;/code&gt;到&lt;code class=&quot;prettyprint&quot;&gt;z&lt;/code&gt;范围内的任何字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\b]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;匹配一个字边界, 即字与空格间的位置&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;er\b&lt;/code&gt;匹配&lt;code class=&quot;prettyprint&quot;&gt;never&lt;/code&gt;中的&lt;code class=&quot;prettyprint&quot;&gt;er&lt;/code&gt;, 但不匹配&lt;code class=&quot;prettyprint&quot;&gt;verb&lt;/code&gt;中的&lt;code class=&quot;prettyprint&quot;&gt;er&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\B]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;匹配非字边界&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\d]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;数字字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;等效于 &lt;code class=&quot;prettyprint&quot;&gt;[0-9]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\D]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;非数字字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;等效于 &lt;code class=&quot;prettyprint&quot;&gt;[^0-9]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\f]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;换页符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;等效于 &lt;code class=&quot;prettyprint&quot;&gt;\x0c&lt;/code&gt; 和 &lt;code class=&quot;prettyprint&quot;&gt;\cL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\n]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;换行符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;等效于 &lt;code class=&quot;prettyprint&quot;&gt;\x0a&lt;/code&gt; 和 &lt;code class=&quot;prettyprint&quot;&gt;\cJ&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\r]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;回车符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;等效于 &lt;code class=&quot;prettyprint&quot;&gt;\x0d&lt;/code&gt; 和 &lt;code class=&quot;prettyprint&quot;&gt;\cM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\s]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;匹配任何空白字符,包括空格、制表符、换页符等&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;等效于 &lt;code class=&quot;prettyprint&quot;&gt;[ \f\n\r\t\v]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\S]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;非空白字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;等效于 &lt;code class=&quot;prettyprint&quot;&gt;[^ \f\n\r\t\v]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\t]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;制表符(TAB)&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;等效于 &lt;code class=&quot;prettyprint&quot;&gt;\x09&lt;/code&gt; 和 &lt;code class=&quot;prettyprint&quot;&gt;\cI&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\v]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;垂直制表符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;等效于 &lt;code class=&quot;prettyprint&quot;&gt;\x09&lt;/code&gt; 和 &lt;code class=&quot;prettyprint&quot;&gt;\cI&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\w]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;普通字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;等效于 &lt;code class=&quot;prettyprint&quot;&gt;[A-Za-z0-9_]&lt;/code&gt;(注意有个&lt;code class=&quot;prettyprint&quot;&gt;_&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\W]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;非普通字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;等效于 &lt;code class=&quot;prettyprint&quot;&gt;[^A-Za-z0-9_]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\cx]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;匹配 &lt;code class=&quot;prettyprint&quot;&gt;x&lt;/code&gt; 表示的控制字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;\cM&lt;/code&gt; 匹配 &lt;code class=&quot;prettyprint&quot;&gt;Control-M&lt;/code&gt; 或&lt;code class=&quot;prettyprint&quot;&gt;回车符&lt;/code&gt;&lt;br&gt;&lt;code class=&quot;prettyprint&quot;&gt;x&lt;/code&gt; 的值必须在 &lt;code class=&quot;prettyprint&quot;&gt;A-Z&lt;/code&gt; 或 &lt;code class=&quot;prettyprint&quot;&gt;a-z&lt;/code&gt; 之间, 否则认为 &lt;code class=&quot;prettyprint&quot;&gt;c&lt;/code&gt; 就是&lt;code class=&quot;prettyprint&quot;&gt;c&lt;/code&gt;字符本身&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\xn]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;匹配 &lt;code class=&quot;prettyprint&quot;&gt;n&lt;/code&gt;,此处的 n 是一个十六进制转义码 &lt;br&gt;十六进制转义码必须正好是两位数长&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;\x41&lt;/code&gt;匹配字母&lt;code class=&quot;prettyprint&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;\x041&lt;/code&gt;与&lt;code class=&quot;prettyprint&quot;&gt;\x04&lt;/code&gt;&amp;amp;&lt;code class=&quot;prettyprint&quot;&gt;1&lt;/code&gt;等效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;[\un]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;匹配 &lt;code class=&quot;prettyprint&quot;&gt;n&lt;/code&gt;,此处的 n 以四位十六进制数表示的 Unicode 字符&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;\u00A9&lt;/code&gt;匹配版权符号 (©)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;hr&gt;
</description>
        <pubDate>Sat, 24 Oct 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E5%BF%AB%E6%8D%B7%E9%80%9F%E6%9F%A5/2015-10-24-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E5%BF%AB%E6%8D%B7%E9%80%9F%E6%9F%A5/2015-10-24-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</guid>
        
        <category>正则表达式</category>
        
        
        <category>快捷速查</category>
        
      </item>
    
  </channel>
</rss>
