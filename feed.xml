<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逆水行舟</title>
    <description>Michael King&#39;s Blog</description>
    <link>http://loveshisong.cn/</link>
    <atom:link href="http://loveshisong.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 12 Dec 2015 16:21:30 +0800</pubDate>
    <lastBuildDate>Sat, 12 Dec 2015 16:21:30 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Spring的AOP</title>
        <description>&lt;p&gt;在Spring中使用AOP的详细资料可以查看&lt;a href=&quot;http://shouce.jb51.net/spring/aop.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;aop的实现方式&quot;&gt;AOP的实现方式&lt;/h2&gt;

&lt;p&gt;在Java中,从织入切面的方式上来看,存在三种织入方式:编译时织入、加载时织入和运行时织入&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;编译时织入(Compile Time Weaving, CTW)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指在Java编译期,采用特殊的编译器, 将切面织入到Java类中,即发生在从java文件到class文件的过程.&lt;br&gt;
这种方式将切面直接编译进了字节码，所以运行时不再需要动态创建代理对象, 节约了内存和CPU, 但编译过程复杂(可借助Maven AspectJ插件)，编写aspect文件(.aj文件)复杂&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加载时织入(Load Time Weaving, LTW)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指通过特殊的类加载器(如AspectJ compiler), 在JVM载入字节码文件时, 织入切面, 即发生在class文件加载的过程.&lt;br&gt;
具体可参考&lt;a href=&quot;http://shouce.jb51.net/spring/aop.html#aop-aj-ltw&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;运行时织入&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;采用CGLib工具或JDK动态代理进行切面的织入, 如Spring AOP&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;aop、cglib、spring-aop、aspectj之间的关系&quot;&gt;AOP、CGLib、Spring AOP、AspectJ之间的关系&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;AOP, Aspect Oriented Programming, 面向切面编程,是个概念, 类似于面向对象编程(OOP)一样&lt;/li&gt;
&lt;li&gt;CGLib, 基于&lt;code class=&quot;prettyprint&quot;&gt;asm.jar&lt;/code&gt;的字节码增强技术API, 开源的, 也是个jar包:&lt;code class=&quot;prettyprint&quot;&gt;cglib.jar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Spring AOP, Spring的AOP实现, 在运行时基于动态代理(JDK或cglib)的方式进行织入, Spring3.2以后不再需要依赖&lt;code class=&quot;prettyprint&quot;&gt;cglib.jar&lt;/code&gt;包, 因为它里面的类已经被&lt;code class=&quot;prettyprint&quot;&gt;spring-core.jar&lt;/code&gt;包含了&lt;/li&gt;
&lt;li&gt;AspectJ, 提供了完整的AOP实现

&lt;ol&gt;
&lt;li&gt;AspectJ是一个代码生成工具,于自己的语法编译工具，编译的结果是Java Class文件, 支持编译时织入切面，即所谓的CTW机制&lt;/li&gt;
&lt;li&gt;AspectJ有自己的类装载器，支持在类装载时织入切面，即所谓的LTW机制&lt;/li&gt;
&lt;li&gt;AspectJ同样也支持运行时织入，运行时织入是基于动态代理的(默认机制)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;spring中aop相关的概念&quot;&gt;Spring中AOP相关的概念&lt;/h2&gt;

&lt;p&gt;在怎么使用之前,最好先看看相关概念,有关&lt;code class=&quot;prettyprint&quot;&gt;Joinpoint&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;Pointcut&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;Advice&lt;/code&gt;等概念,看&lt;a href=&quot;http://shouce.jb51.net/spring/aop.html#aop-introduction-defn&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;启用@aspectj支持&quot;&gt;启用@AspectJ支持&lt;/h2&gt;

&lt;p&gt;在Spring中使用&lt;code class=&quot;prettyprint&quot;&gt;@AspectJ&lt;/code&gt;可以在配置文件中启用&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;aop:aspectj-autoproxy/&amp;gt;&lt;/code&gt;, 甚至启用LTW机制&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;context:load-time-weaver/&amp;gt;&lt;/code&gt;, 对应的注解分别为&lt;code class=&quot;prettyprint&quot;&gt;@EnableAspectJAutoProxy&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;@EnableLoadTimeWeaving&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;声明一个切面&quot;&gt;声明一个切面&lt;/h2&gt;

&lt;p&gt;在带有&lt;code class=&quot;prettyprint&quot;&gt;@AspectJ&lt;/code&gt;注解的类上同时加上&lt;code class=&quot;prettyprint&quot;&gt;@Component&lt;/code&gt;(声明为一个bean)注解并确保被自动扫描, 这样才会被Spring识别并管理&lt;/p&gt;

&lt;h2 id=&quot;声明一个切入点&quot;&gt;声明一个切入点&lt;/h2&gt;

&lt;p&gt;切入点决定了连接点关注的内容，使得我们可以控制通知什么时候执行, 即从哪里把要做的操作(通知)切入进去&lt;br&gt;
一个切入点声明有两个部分: &lt;em&gt;切入点签名&lt;/em&gt; 和 &lt;em&gt;切入点表达式&lt;/em&gt;&lt;br&gt;
在&lt;code class=&quot;prettyprint&quot;&gt;@AspectJ&lt;/code&gt;注解风格的AOP中, &lt;em&gt;切入点签名&lt;/em&gt; 通过一个普通的方法定义来提供, 该方法必需反回&lt;code class=&quot;prettyprint&quot;&gt;void&lt;/code&gt;类型;&lt;br&gt;
&lt;em&gt;切入点表达式&lt;/em&gt; 使用&lt;code class=&quot;prettyprint&quot;&gt;@Pointcut&lt;/code&gt;注解来表示(内容略多, 后面讲), 一个切入点声明如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;execution(* sayAdvisorBefore(..)) &amp;amp;&amp;amp; args(param)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;param&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pointcutName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;value: 指定切入点表达式, 如&lt;code class=&quot;prettyprint&quot;&gt;execution&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;args&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;argNames: 指定该切入点方法参数列表,多个用&lt;code class=&quot;prettyprint&quot;&gt;,&lt;/code&gt;分隔,这些参数将传递给通知方法同名的参数;&lt;/li&gt;
&lt;li&gt;pointcutName: 切入点名字，可以用该名字引用该切入点表达式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;声明通知&quot;&gt;声明通知&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;@AspectJ&lt;/code&gt;风格的声明通知支持5种通知类型:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@Before&lt;/code&gt;: 前置通知,执行连接点方法之前执行&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@AfterReturning&lt;/code&gt;: 后置返回通知, 一个匹配的方法返回的时候执行&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@AfterThrowing&lt;/code&gt;: 异常通知, 在一个方法抛出异常后执行&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@After&lt;/code&gt;: 最终通知, 不论一个方法是如何结束的,最终通知都会运行, 最终通知必须准备处理正常返回和异常返回两种情况&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@Around&lt;/code&gt;: 环绕通知, 在一个方法执行之前和之后执行, 而且它可以决定这个方法在什么时候执行，如何执行，甚至是否执行. 通知的第一个参数必须是&lt;code class=&quot;prettyprint&quot;&gt;ProceedingJoinPoint&lt;/code&gt;类型,在通知体内，调用&lt;code class=&quot;prettyprint&quot;&gt;ProceedingJoinPoint&lt;/code&gt;的&lt;code class=&quot;prettyprint&quot;&gt;proceed()&lt;/code&gt;方法会导致 后台的连接点方法执行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果在同一个连接点上执行多个通知,可以使用&lt;code class=&quot;prettyprint&quot;&gt;@Order&lt;/code&gt;注解决定其执行顺序&lt;/p&gt;

&lt;p&gt;下面是通知的使用方式:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;参数列表参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;参数列表参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;参数列表参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AfterReturning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pointcut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 如果指定了将覆盖value属性指定的，pointcut具有高优先级&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;参数列表参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;returning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;返回值对应参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AfterThrowing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pointcut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;切入点表达式或命名切入点&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;参数列表参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;throwing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;异常对应参数名&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来个小例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeforeExample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pointcutName(param)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;param&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beforeAdvice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 切入点匹配到的参数将传递过来&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上例使用&lt;code class=&quot;prettyprint&quot;&gt;@Before&lt;/code&gt;进行前置通知声明,其中value用于定义切入点表达式或引用命名切入点&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;通知参数&quot;&gt;通知参数&lt;/h2&gt;

&lt;p&gt;通知方法可以获取被通知方法的参数，主要是通过&lt;code class=&quot;prettyprint&quot;&gt;JoinPoint&lt;/code&gt;(环绕通知是&lt;code class=&quot;prettyprint&quot;&gt;JoinPoint&lt;/code&gt;的子类&lt;code class=&quot;prettyprint&quot;&gt;ProceedingJoinPoint&lt;/code&gt;)来获取, &lt;code class=&quot;prettyprint&quot;&gt;JoinPoint&lt;/code&gt;必须是第一个参数, Spring会自动传入.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;JoinPoint&lt;/code&gt;的声明如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JoinPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 执行连接点的方法&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 执行连接点的方法,可以把原来的参数用新的args替换掉&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JoinPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的相关信息  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的简短相关信息  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toLongString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的全部相关信息  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getThis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//返回AOP代理对象  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//返回目标对象  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//返回被通知方法参数列表  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Signature&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//返回当前连接点签名  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SourceLocation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSourceLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//返回连接点方法所在类文件中的位置  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//连接点类型  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StaticPart&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStaticPart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//返回连接点静态部分&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 这是个内部接口, 提供访问连接点的静态部分，如被通知方法签名、连接点类型等&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StaticPart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;Signature&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//返回当前连接点签名  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;//连接点类型  &lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;//唯一标识  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的相关信息  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的简短相关信息  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toLongString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//连接点所在位置的全部相关信息  &lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;切入点表达式&quot;&gt;切入点表达式&lt;/h2&gt;

&lt;p&gt;切入点表达式就是组成&lt;code class=&quot;prettyprint&quot;&gt;@Pointcut&lt;/code&gt;注解的值, 用于匹配具体的连接点.&lt;br&gt;
切入点表达式由切入点指示符、类型匹配语句、通配符、组合符组成&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;切入点指示符(PCD)&lt;/strong&gt;&lt;br&gt;
在切入点表达式中可以使用如下的AspectJ切入点指示符(PCD):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;execution: 匹配方法执行, 这是最经常的切入点指示符&lt;/li&gt;
&lt;li&gt;within: 匹配特定类型之内的全部方法执行&lt;/li&gt;
&lt;li&gt;this: 用于匹配当前AOP代理对象类型的连接点,包括接口&lt;/li&gt;
&lt;li&gt;target: 用于匹配当前目标对象类型的连接点,不包括接口&lt;/li&gt;
&lt;li&gt;args: 用于匹配当前执行的方法传入的参数为指定类型的连接点&lt;/li&gt;
&lt;li&gt;@within: 用于匹配持有指定注解类型内的连接点&lt;/li&gt;
&lt;li&gt;@target: 用于匹配当前目标对象类型的连接点，其中目标对象持有指定的注解&lt;/li&gt;
&lt;li&gt;@args: 匹配当前执行的方法传入的参数持有指定的注解&lt;/li&gt;
&lt;li&gt;@annotation: 匹配当前执行方法持有指定注解的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看不明白还是看最后面的例子吧&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;类型匹配语句&lt;/strong&gt;&lt;br&gt;
类型匹配语句格式像下面这样(带&lt;code class=&quot;prettyprint&quot;&gt;?&lt;/code&gt;的属于可选,可以不写):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对类的匹配: &lt;code class=&quot;prettyprint&quot;&gt;注解? 类的全限定名字&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对方法的匹配: &lt;code class=&quot;prettyprint&quot;&gt;注解? 修饰符? 返回值类型 类型声明? 方法名(参数列表) 异常列表？&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;类型匹配的通配符&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;*&lt;/code&gt;: 匹配任何数量字符；&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;..&lt;/code&gt;:(两个点)匹配任何数量字符的重复;如在类型模式中匹配任何数量子包,而在方法参数模式中匹配任何数量参数&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;+&lt;/code&gt;: 匹配指定类型的子类型,仅能作为后缀放在类型模式后边&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;组合切入点表达式&lt;/strong&gt;&lt;br&gt;
AspectJ使用 与(&amp;amp;&amp;amp;)、或(||)、非(!)来组合切入点表达式, 在xml文件中可使用and、or、not&lt;/p&gt;

&lt;h2 id=&quot;切入点表达式示例&quot;&gt;切入点表达式示例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;execution&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;execution(方法表达式)&lt;/code&gt;匹配方法执行&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;public * *(..)&lt;/td&gt;
&lt;td&gt;所有public方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService.*()&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService中任何无参方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService＋.*()&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService及子类中任何无参方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService.*(＊)&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService中只有一个参数的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService.*(..)&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService中所有方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService.*(java.util.Date)&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService中只有一个Date类型参数的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..IService*.test*(..)&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService前缀类型中test前缀开头的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* cn.test..&lt;em&gt;.&lt;/em&gt;(..)&lt;/td&gt;
&lt;td&gt;cn.test及子包下任何类的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@java.lang.Deprecated * *(..)&lt;/td&gt;
&lt;td&gt;任何持有@Deprecated注解的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@(java.lang.Deprecated &amp;amp;&amp;amp; cn.javass..Secure) * *(..)&lt;/td&gt;
&lt;td&gt;任何持有@java.lang.Deprecated和@ cn.javass..Secure注解的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;within&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;within(类型表达式)&lt;/code&gt;匹配指定类型内的方法执行&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;within(cn.test..*)&lt;/td&gt;
&lt;td&gt;cn.test及子包下的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;within(cn.test..IService＋)&lt;/td&gt;
&lt;td&gt;cn.test及子包下IService及子类的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;within(@cn.test.Secure *)&lt;/td&gt;
&lt;td&gt;cn.test及子包下带有@cn.test.Secure注解的任何类(接口不行)的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;this&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;this(类型全限定名)&lt;/code&gt;匹配当前AOP代理对象类型的执行方法,包括引入接口,不支持通配符&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;this(cn.test.IService)&lt;/td&gt;
&lt;td&gt;当前AOP对象实现了IService接口的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;target&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;target(类型全限定名)&lt;/code&gt;匹配当前目标对象类型的执行方法,不包括引入接口,不支持通配符&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;this(cn.test.IService)&lt;/td&gt;
&lt;td&gt;当前目标对象(非AOP对象)实现了IService接口的任何方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;args&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;args(参数类型列表)&lt;/code&gt;匹配传入参数(不是声明时的参数)为指定类型的执行方法,参数类型必须是全限定名, 不支持通配符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;args属于动态切入点，这种切入点开销非常大，非特殊情况最好不要使用&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;args(java.lang.String, ..)&lt;/td&gt;
&lt;td&gt;第一个参数为String,后面有任意个参数的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@within&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@within(注解类型全限定名)&lt;/code&gt;匹配所以持有指定注解类型内的方法, 必须是在目标对象上声明注解，在接口上声明不起作用&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@within(cn.test.Secure)&lt;/td&gt;
&lt;td&gt;任何目标对象对应的类型持有Secure注解的类方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@target&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@target(注解类型全限定名)&lt;/code&gt;匹配当前目标对象类型的执行方法, 必须是在目标对象上声明注解，在接口上声明不起作用&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@target(cn.test.Secure)&lt;/td&gt;
&lt;td&gt;任何目标对象对应的类型持有Secure注解的类方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@args&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@args(注解类型全限定名)&lt;/code&gt;匹配当前执行的方法传入的参数持有指定注解的执行&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@args(cn.test.Secure)&lt;/td&gt;
&lt;td&gt;任何只接受一个参数的方法，且方法运行时传入的参数持有Secure注解&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;@annotation&lt;/code&gt;使用&lt;code class=&quot;prettyprint&quot;&gt;@annotation(注解类型全限定名)&lt;/code&gt;匹配当前执行方法持有指定注解的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@annotation(cn.test.Secure)&lt;/td&gt;
&lt;td&gt;当前执行方法上持有Secure注解的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;hr&gt;
</description>
        <pubDate>Thu, 26 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-26-Spring%E7%9A%84AOP.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-26-Spring%E7%9A%84AOP.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava不可变集合</title>
        <description>&lt;p&gt;JDK中也提供了&lt;code class=&quot;prettyprint&quot;&gt;Collections.unmodifiableXXX&lt;/code&gt;方法把普通集合包装为不可变形式&lt;br&gt;
Guava直接提供了不可变集合类型&lt;code class=&quot;prettyprint&quot;&gt;ImmutableXXX&lt;/code&gt;, 所有不可变集合都不接受&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;值  &lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;怎么使用不可变集合&quot;&gt;怎么使用不可变集合&lt;/h2&gt;

&lt;p&gt;不可变集合可以用如下多种方式创建&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;copyOf方法: 如&lt;code class=&quot;prettyprint&quot;&gt;ImmutableSet.copyOf(set)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;of方法: 如&lt;code class=&quot;prettyprint&quot;&gt;ImmutableSet.of(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;)&lt;/code&gt;或&lt;code class=&quot;prettyprint&quot;&gt;ImmutableMap.of(&amp;quot;a&amp;quot;, 1, &amp;quot;b&amp;quot;, 2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Builder工具: 如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GOOGLE_COLORS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WEBSAFE_COLORS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;191&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;aslist视图&quot;&gt;asList视图&lt;/h2&gt;

&lt;p&gt;所有不可变集合都有一个asList()方法提供ImmutableList视图，来帮助你用列表形式方便地读取集合元素&lt;br&gt;
例如，你可以使用&lt;code class=&quot;prettyprint&quot;&gt;sortedSet.asList().get(k)&lt;/code&gt;从&lt;code class=&quot;prettyprint&quot;&gt;ImmutableSortedSet&lt;/code&gt;中读取第k个最小元素&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Mon, 23 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-23-Guava%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-23-Guava%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava之CharMatcher</title>
        <description>&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;CharMatcher&lt;/code&gt;是字符匹配器, 代表着某一类字符, &lt;code class=&quot;prettyprint&quot;&gt;CharMatcher&lt;/code&gt;实现了&lt;code class=&quot;prettyprint&quot;&gt;Predicate&amp;lt;Character&amp;gt;&lt;/code&gt;接口&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;CharMatcher&lt;/code&gt;提供了一系列方法，让你对字符作特定类型的操作：修剪[trim]、折叠[collapse]、移除[remove]、保留[retain]等&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;CharMatcher&lt;/code&gt;只处理&lt;code class=&quot;prettyprint&quot;&gt;char&lt;/code&gt;类型代表的字符即&lt;code class=&quot;prettyprint&quot;&gt;0x0000&lt;/code&gt;~&lt;code class=&quot;prettyprint&quot;&gt;0xFFFF&lt;/code&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;获取charmatcher&quot;&gt;获取CharMatcher&lt;/h2&gt;

&lt;p&gt;CharMatcher中的常量可以满足大多数字符匹配需求&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内置CharMatcher&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ANY&lt;/td&gt;
&lt;td&gt;任何字符都匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NONE&lt;/td&gt;
&lt;td&gt;不匹配任何字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WHITESPACE&lt;/td&gt;
&lt;td&gt;空白字符(Unicode标准)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BREAKING_WHITESPACE&lt;/td&gt;
&lt;td&gt;被空白隔开的两个词之间的那个空白, 比如两个单词之间的空白间隔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INVISIBLE&lt;/td&gt;
&lt;td&gt;不可见字符, 如LINE_SEPARATOR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DIGIT&lt;/td&gt;
&lt;td&gt;Unicode数字,比JAVA_DIGIT范围大,如果要表示0～9请用&lt;code class=&quot;prettyprint&quot;&gt;inRange(&amp;#39;0&amp;#39;, &amp;#39;9&amp;#39;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_LETTER&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_DIGIT&lt;/td&gt;
&lt;td&gt;Java定义的数字,范围超过0~9,如果要表示0～9请用&lt;code class=&quot;prettyprint&quot;&gt;inRange(&amp;#39;0&amp;#39;, &amp;#39;9&amp;#39;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_LETTER_OR_DIGIT&lt;/td&gt;
&lt;td&gt;JAVA_LETTER 或 JAVA_DIGIT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_UPPER_CASE&lt;/td&gt;
&lt;td&gt;范围比a~z大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_LOWER_CASE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA_ISO_CONTROL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ASCII&lt;/td&gt;
&lt;td&gt;ASCII码,这意味着它的代码点低于128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SINGLE_WIDTH&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZEROES&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NINES&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;获取字符匹配器的常见方法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;is(final char match)&lt;/code&gt;: 给定单一字符匹配&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;isNot(final char match)&lt;/code&gt;: 不是某字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;anyOf(final CharSequence sequence)&lt;/code&gt;: 枚举匹配字符,如&lt;code class=&quot;prettyprint&quot;&gt;CharMatcher.anyOf(“aeiou”)&lt;/code&gt;匹配小写英语元音&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;noneOf(CharSequence sequence)&lt;/code&gt;: 不是sequence里的任意一个,anyOf的相反方法, 等同于&lt;code class=&quot;prettyprint&quot;&gt;anyOf(sequence).negate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;inRange(final char startInclusive, final char endInclusive)&lt;/code&gt;: 给定字符范围匹配，如&lt;code class=&quot;prettyprint&quot;&gt;CharMatcher.inRange(‘a’, ‘z’)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;or(CharMatcher other)&lt;/code&gt;: 取并集&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;and(CharMatcher other)&lt;/code&gt;: 取交集&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;negate(CharMatcher other)&lt;/code&gt;: 取反&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;使用字符匹配器&quot;&gt;使用字符匹配器&lt;/h2&gt;

&lt;p&gt;返回是否匹配(&lt;code class=&quot;prettyprint&quot;&gt;boolean&lt;/code&gt;)的方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean matchesAnyOf(CharSequence sequence)&lt;/code&gt; : 是否sequence中有匹配的字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean matchesAllOf(CharSequence sequence)&lt;/code&gt; : 是否sequence中的所有字符都匹配&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean matchesNoneOf(CharSequence sequence)&lt;/code&gt; : sequence中不包含能够匹配的字符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;返回&lt;code class=&quot;prettyprint&quot;&gt;int&lt;/code&gt;的方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int indexIn(CharSequence sequence)&lt;/code&gt; : 返回第一次匹配上的下标, -1表示没有匹配的&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int indexIn(CharSequence sequence, int start)&lt;/code&gt; : &amp;gt;=start或-1&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int lastIndexIn(CharSequence sequence)&lt;/code&gt; : 最后一次匹配的下标, -1表示没有匹配的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;返回匹配的内容(&lt;code class=&quot;prettyprint&quot;&gt;String&lt;/code&gt;)的方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String removeFrom(CharSequence sequence)&lt;/code&gt; : 移除匹配字符,返回的是移除匹配字符之后剩下的&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String retainFrom(CharSequence sequence)&lt;/code&gt; : 保留匹配字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String replaceFrom(CharSequence sequence, char replacement)&lt;/code&gt; : 替代匹配字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String replaceFrom(CharSequence sequence, CharSequence replacement)&lt;/code&gt; :替代匹配字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String trimFrom(CharSequence sequence)&lt;/code&gt; : 移除前导和尾部的匹配字符&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String trimLeadingFrom(CharSequence sequence)&lt;/code&gt;: 只移除前导匹配的&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String trimTrailingFrom(CharSequence sequence)&lt;/code&gt;: 只移除尾部匹配的&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String collapseFrom(CharSequence sequence, char replacement)&lt;/code&gt;: 替换,但连续的匹配字符只替换一次&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String trimAndCollapseFrom(CharSequence sequence, char replacement)&lt;/code&gt;: 中间连续的只替换一次,开头和结尾的直接去掉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bazaar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;quot;bzr&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retainFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bazaar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;quot;aaa&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;radar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;rodor&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;yaha&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;oo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;yoohoo&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trimFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;abacatbab&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;cat&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trimFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 等同于 str.trim()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;eko&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collapseFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bookkeeper&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;b-p-r&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Sat, 21 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-21-Guava%E4%B9%8BCharMatcher.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-21-Guava%E4%B9%8BCharMatcher.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava之Splitter</title>
        <description>&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter&lt;/code&gt;相当于拆分器,跟&lt;a href=&quot;/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-19-Guava%E4%B9%8BJoiner.html&quot;&gt;Joiner&lt;/a&gt;正好是相反的操作&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;生成splitter的方法&quot;&gt;生成&lt;code class=&quot;prettyprint&quot;&gt;Splitter&lt;/code&gt;的方法&lt;/h2&gt;

&lt;p&gt;工厂方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter on(char separator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter on(final CharMatcher separatorMatcher)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter on(final String separator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter on(final Pattern separatorPattern)&lt;/code&gt;: 支持正则&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter onPattern(String separatorPattern)&lt;/code&gt;: 等效于&lt;code class=&quot;prettyprint&quot;&gt;Splitter.on(Pattern.compile(pattern))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter fixedLength(final int length)&lt;/code&gt;: 每length个元素分成一组&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修饰方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter omitEmptyStrings()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter limit(int limit)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter trimResults()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Splitter trimResults(CharMatcher trimmer)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo,,bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;foo&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;bar&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo,;bar,quux&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;foo&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;quux&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo, bar,baz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;foo&amp;quot;, &amp;quot;bar,baz&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\d+&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a12b3c&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [a, b, c]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fixedLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;abcde&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;ab&amp;quot;, &amp;quot;cd&amp;quot;, &amp;quot;e&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a,b,c,d&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c,d&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;omitEmptyStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a,,,b,,,c,d&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c,d&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trimResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; a , b , c , d &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c , d&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trimResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_a ,_b_ ,c__&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&amp;quot;a &amp;quot;, &amp;quot;b_ &amp;quot;, &amp;quot;c&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;split-方法&quot;&gt;split 方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Iterable&amp;lt;String&amp;gt; split(final CharSequence sequence)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;String&amp;gt; splitToList(CharSequence sequence)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;mapsplitter&quot;&gt;MapSplitter&lt;/h2&gt;

&lt;p&gt;Splitter提供了个方法返回内部类&lt;code class=&quot;prettyprint&quot;&gt;Splitter.MapSplitter&lt;/code&gt;专门分割成map  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;MapSplitter withKeyValueSeparator(String separator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;MapSplitter withKeyValueSeparator(char separator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;MapSplitter withKeyValueSeparator(Splitter keyValueSplitter)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意: &lt;code class=&quot;prettyprint&quot;&gt;MapSplitter&lt;/code&gt;的&lt;code class=&quot;prettyprint&quot;&gt;split&lt;/code&gt;方法返回的是&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Splitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withKeyValueSeparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a=1&amp;amp;b=2&amp;amp;c=3&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-20-Guava%E4%B9%8BSplitter.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-20-Guava%E4%B9%8BSplitter.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava之Joiner</title>
        <description>&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Joiner&lt;/code&gt;在Guava的&lt;code class=&quot;prettyprint&quot;&gt;com.google.common.base&lt;/code&gt;包中, 算是字符处理工具, 其作用是连接多个元素, 可当作连接器来使用  &lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;生成joiner的方法&quot;&gt;生成&lt;code class=&quot;prettyprint&quot;&gt;Joiner&lt;/code&gt;的方法&lt;/h2&gt;

&lt;p&gt;工厂方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Joiner on(String separator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Joiner on(char separator)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修饰方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Joiner useForNull(final String nullText)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Joiner skipNulls()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;skipNulls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Harry&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Ron&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hermione&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Harry; Ron; Hermione&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: Joiner类是不可变的, 即它是线程安全的, 可以将其定义为&lt;code class=&quot;prettyprint&quot;&gt;static final&lt;/code&gt;常量&lt;br&gt;
像下面这样使用是 &lt;strong&gt;错误&lt;/strong&gt; 的:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joiner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// joiner 是不可变的&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;skipNulls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 这里返回了个新的Joiner, 原来的joiner并没变&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrong&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;wrong&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这就直接报NullPointerException了, 原来的joiner没有skipNull功能&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;join-方法&quot;&gt;join 方法&lt;/h2&gt;

&lt;p&gt;返回连接之后的字符串, 返回的字符串都是&lt;code class=&quot;prettyprint&quot;&gt;final&lt;/code&gt;的:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;public final String join(Iterable&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;public final String join(Iterator&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;public final String join(Object[] parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;public final String join(Object first, Object second, Object... rest)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns &amp;quot;1,5,7&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;appendto-方法&quot;&gt;appendTo 方法&lt;/h2&gt;

&lt;p&gt;把后面的参数以字符串的方式添加到第一个参数后面&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;java.lang.Appendable&lt;/code&gt;接口的子类(如&lt;code class=&quot;prettyprint&quot;&gt;StringBuilder&lt;/code&gt; &lt;code class=&quot;prettyprint&quot;&gt;BufferedWriter&lt;/code&gt;等), 都可以作为第一个参数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;StringBuilder appendTo(StringBuilder builder, Iterable&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;StringBuilder appendTo(StringBuilder builder, Iterable&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;StringBuilder appendTo(StringBuilder builder, Object[] parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;StringBuilder appendTo(StringBuilder builder, Object first, Object second, Object... rest)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;A extends Appendable&amp;gt; A appendTo(A appendable, Iterable&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;A extends Appendable&amp;gt; A appendTo(A appendable, Iterator&amp;lt;?&amp;gt; parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;A extends Appendable&amp;gt; A appendTo(A appendable, Object[] parts)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;A extends Appendable&amp;gt; A appendTo(A appendable, Object first, Object second, Object... rest)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;appendTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;list:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// list:1,2,3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;mapjoiner&quot;&gt;MapJoiner&lt;/h2&gt;

&lt;p&gt;Joiner提供了个方法返回内部类&lt;code class=&quot;prettyprint&quot;&gt;Joiner.MapJoiner&lt;/code&gt;专门用于处理map  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;MapJoiner withKeyValueSeparator(String keyValueSeparator)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Maps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withKeyValueSeparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// b-&amp;gt;2;a-&amp;gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Thu, 19 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-19-Guava%E4%B9%8BJoiner.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-19-Guava%E4%B9%8BJoiner.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava新集合类型</title>
        <description>&lt;p&gt;guava的collection包里新增加了几个集合类型非常实用&lt;br&gt;
新增类型有:Multiset、Multimap、BiMap、Table、&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;multiset&quot;&gt;Multiset&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;继承自&lt;code class=&quot;prettyprint&quot;&gt;Collection&lt;/code&gt;, 类似于&lt;code class=&quot;prettyprint&quot;&gt;Set&lt;/code&gt;, 里面的元素是无顺序的, 但不同的是它可以多次添加相等的元素, 并能记录每个元素的个数.
Multiset {a, a, b}和{a, b, a}是相等的, &lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;类似于但绝不等同于&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;E, Integer&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;a href=&quot;/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Collection%E6%95%B4%E7%90%86.html&quot;&gt;Collection中的方法&lt;/a&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;都有, 注意&lt;code class=&quot;prettyprint&quot;&gt;size()&lt;/code&gt;方法, 重复的元素也会算个数(类似的其它方法也会包含重复元素)&lt;br&gt;
除此之外&lt;code class=&quot;prettyprint&quot;&gt;Multiset&lt;/code&gt;接口中定义的方法有:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int count(Object element)&lt;/code&gt;: 返回给定元素的计数&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int add(E element, int occurrences)&lt;/code&gt;: 添加元素并指定元素个数; 返回添加之前该元素的个数, 一般为0&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int remove(Object element, int occurrences)&lt;/code&gt;: 移除元素, 若该元素个数小于指定个数,则全移除; 返回操作之前该元素的个数&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int setCount(E element, int count)&lt;/code&gt;: 设定某一个元素的重复次数, 相当于add和remove的组合体; 返回操作之前该元素的个数&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean setCount(E element, int oldCount, int newCount)&lt;/code&gt;: 将符合原有重复个数的元素修改为新的重复次数, 原来个数不为oldCount不会修改&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;视图操作&quot;&gt;视图操作&lt;/h3&gt;

&lt;p&gt;对视图的所有操作都会反映到原来的Multiset上&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;E&amp;gt; elementSet()&lt;/code&gt;: 返回仅包含不同元素的set, 对set进行移除, 会反映到multiset上(若multi中有&lt;code class=&quot;prettyprint&quot;&gt;keyX2&lt;/code&gt;, 则会全被移除)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;Entry&amp;lt;E&amp;gt;&amp;gt; entrySet()&lt;/code&gt;: 返回Set&lt;Multiset.Entry&gt;, 包含的Entry支持使用&lt;code class=&quot;prettyprint&quot;&gt;getElement()&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;getCount()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;multiset的各种实现&quot;&gt;Multiset的各种实现&lt;/h3&gt;

&lt;p&gt;Multiset的实现类, 可以通过构造方法new出来, 也可以调用&lt;code class=&quot;prettyprint&quot;&gt;XXXMultiset.create()&lt;/code&gt;静态函数来创建&lt;br&gt;
它们都直接继承了Multiset接口:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Guava实现&lt;/th&gt;
&lt;th&gt;对比JDK的Map&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;是否支持null&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashMultiset&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedHashSet&lt;/td&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeMultiset&lt;/td&gt;
&lt;td&gt;TreeMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EnumMultiset&lt;/td&gt;
&lt;td&gt;EnumMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableMultiset&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ConcurrentHashMultiset&lt;/td&gt;
&lt;td&gt;ConcurrentHashMap&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ForwardingMultiset&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;hr&gt;

&lt;h2 id=&quot;multimap&quot;&gt;Multimap&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;把一个键映射到多个值, 类似于但不等同于&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;K, Collection&amp;lt;V&amp;gt;&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;跟JDK中的&lt;code class=&quot;prettyprint&quot;&gt;Map&lt;/code&gt;并没有什么关系, 但&lt;a href=&quot;/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Map%E6%95%B4%E7%90%86.html&quot;&gt;Map中的方法&lt;/a&gt;在&lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;也有对应的  &lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multimap&lt;/code&gt;接口定义的普通方法有:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int size()&lt;/code&gt;: 返回键值对的个数 &lt;code class=&quot;prettyprint&quot;&gt;a-&amp;gt;1, a-&amp;gt;2&lt;/code&gt;算两个&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean isEmpty()&lt;/code&gt;: 是否为空&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsKey(Object key)&lt;/code&gt;: 是否包含key&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsValue(Object value)&lt;/code&gt;: 是否包含value&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsEntry(Object key, Object value)&lt;/code&gt;: 是否包含key-value对&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean put(K key, V value)&lt;/code&gt;: 如果map元素增加了则返回true, 对于允许存在重复键值对的实现类总是返回&lt;code class=&quot;prettyprint&quot;&gt;true&lt;/code&gt;,
不允许重复键值对存在的实现类才有可能返回&lt;code class=&quot;prettyprint&quot;&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean putAll(K key, Iterable values)&lt;/code&gt;: map改变则返回true&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean putAll(Multimap multimap)&lt;/code&gt;: map改变则返回true&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean remove(Object key, Object value)&lt;/code&gt;: 移除键值对, map变了返回true&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; removeAll(Object key)&lt;/code&gt;: 移除与key相关的所有values(key也没了), 并返回values组成的集合(可能为空)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; replaceValues(K key, Iterable values)&lt;/code&gt;: 把与key相关的value全替换掉, 如果values为空,
则等同于&lt;code class=&quot;prettyprint&quot;&gt;removeAll(key)&lt;/code&gt;, 如果原来不包含key,则相当于&lt;code class=&quot;prettyprint&quot;&gt;putAll(key, values)&lt;/code&gt;; 返回被替换掉的value集合(可能为空)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void clear()&lt;/code&gt;: 清空map&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; get(K key)&lt;/code&gt;: 返回key对应的value, 没有key则返回空集合(不是&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;视图操作&quot;&gt;视图操作&lt;/h3&gt;

&lt;p&gt;对这些返回结果的所有操作都会反映到原来的Multimap上&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;K&amp;gt; keySet()&lt;/code&gt;: 返回不重复的key集合&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Multiset&amp;lt;K&amp;gt; keys()&lt;/code&gt;: 返回可重复的key集合&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; values()&lt;/code&gt;: 返回value的集合, 包含重复值&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; entries()&lt;/code&gt;: 返回所有键值对,包括重复键&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;K, Collection&amp;lt;V&amp;gt;&amp;gt; asMap()&lt;/code&gt;: 返回&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;K,Collection&amp;lt;V&amp;gt;&amp;gt;&lt;/code&gt;形式的视图, 返回的Map支持remove操作, 并且会反映到Multimap,
但它不支持put或putAll操作; ListMultimap的&lt;code class=&quot;prettyprint&quot;&gt;asMap.get(key)&lt;/code&gt;不能直接返回List,
可以使用&lt;code class=&quot;prettyprint&quot;&gt;Multimaps.asMap.get(key)&lt;/code&gt;来返回具体的集合类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;multimap的各种实现&quot;&gt;Multimap的各种实现&lt;/h3&gt;

&lt;p&gt;Multimap有许多实现类:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实现类&lt;/th&gt;
&lt;th&gt;键行为类似&lt;/th&gt;
&lt;th&gt;值行为类似&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;是否支持null&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LinkedListMultimap&lt;/td&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td&gt;LinkedList&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayListMultimap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td&gt;ArrayList&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableListMultimap&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;td&gt;ImmutableList&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HashMultimap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td&gt;HashSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedHashMultimap&lt;/td&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td&gt;LinkedHashSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableSetMultimap&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;td&gt;ImmutableSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeMultimap&lt;/td&gt;
&lt;td&gt;TreeMap&lt;/td&gt;
&lt;td&gt;TreeSet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;其实现类的继承关系图如下:
&lt;img src=&quot;/static/images/multimap.png&quot; alt=&quot;Multimap继承关系图&quot; title=&quot;Multimap继承关系图&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;bimap&quot;&gt;BiMap&lt;/h2&gt;

&lt;p&gt;BiMap是个特殊的Map(继承自JDK的Map), 它可以很方便地实现key-value的双向映射, 所以它要求value也必须是唯一的&lt;br&gt;
BiMap的put方法与Map不太一样, put键值对KV时:&lt;br&gt;
若先前KV都不存在,直接put; KV都已存在,则相当于没改变; K在V不在, 则&lt;code class=&quot;prettyprint&quot;&gt;KV&lt;/code&gt;替换&lt;code class=&quot;prettyprint&quot;&gt;KV&amp;#39;&lt;/code&gt;;(至此与Map都一样)&lt;br&gt;
K不在V在, Map可以直接put进去, 但BiMap则不可以&lt;br&gt;
与Map意义不一样的方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;V put(K key, V value)&lt;/code&gt;: K不在V在时, 抛出&lt;code class=&quot;prettyprint&quot;&gt;IllegalArgumentException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void putAll(Map map)&lt;/code&gt;: 同样可能抛异常, 但有可能只加了部分元素进去, 这取决于迭代顺序, 在发生异常之前迭代到的元素可能已经添加进去了&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;V&amp;gt; values()&lt;/code&gt;: 视图操作, 由于BiMap里的value是唯一的, 因此返回的是Set而不是Collection&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsValue(Object value)&lt;/code&gt;: 是否包含value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BiMap比Map新增的方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;V forcePut(K key, V value)&lt;/code&gt;: K不在V在时, 则&lt;code class=&quot;prettyprint&quot;&gt;KV&lt;/code&gt;替换&lt;code class=&quot;prettyprint&quot;&gt;K&amp;#39;V&lt;/code&gt;; 返回先前与key关联的value, 若先前没有相同的key则返回null&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;BiMap&amp;lt;V, K&amp;gt; inverse()&lt;/code&gt;: 视图操作, 返回value到key的映射Map, 两个map里的数据是公用的, 即删除&lt;code class=&quot;prettyprint&quot;&gt;V1-&amp;gt;K1&lt;/code&gt;时, &lt;code class=&quot;prettyprint&quot;&gt;K1-&amp;gt;V1&lt;/code&gt;也没了&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;bimap接口的实现类&quot;&gt;BiMap接口的实现类&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实现类&lt;/th&gt;
&lt;th&gt;key-value&lt;/th&gt;
&lt;th&gt;value-&amp;gt;key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashBiMap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EnumBiMap&lt;/td&gt;
&lt;td&gt;EnumMap&lt;/td&gt;
&lt;td&gt;EnumMap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EnumHashBiMap&lt;/td&gt;
&lt;td&gt;EnumMap&lt;/td&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableBiMap&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;td&gt;ImmutableMap&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;hr&gt;

&lt;h2 id=&quot;table&quot;&gt;Table&lt;/h2&gt;

&lt;p&gt;Table支持两个键进行, 就像名字一样, 可以通过行和列确定一个元素&lt;br&gt;
Table是这样定义的&lt;code class=&quot;prettyprint&quot;&gt;Table&amp;lt;R, C, V&amp;gt;&lt;/code&gt;, 它提供了多种视图:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;R, Map&amp;lt;C, V&amp;gt;&amp;gt; rowMap()&lt;/code&gt;: 用&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;R, Map&amp;lt;C, V&amp;gt;&amp;gt;&lt;/code&gt;表现&lt;code class=&quot;prettyprint&quot;&gt;Table&amp;lt;R, C, V&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;R&amp;gt; rowKeySet()&lt;/code&gt;: 返回行的集合&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;C, V&amp;gt; row(R rowKey)&lt;/code&gt;: 用&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;C, V&amp;gt;&lt;/code&gt;返回给定行的所有列，对这个map进行的写操作也将写入Table中&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;C, Map&amp;lt;R, V&amp;gt;&amp;gt; columnMap()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;C&amp;gt; columnKeySet()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Map&amp;lt;R, V&amp;gt; column(C columnKey)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;Cell&amp;lt;R, C, V&amp;gt;&amp;gt; cellSet()&lt;/code&gt;: 用元素类型为&lt;code class=&quot;prettyprint&quot;&gt;Table.Cell&amp;lt;R, C, V&amp;gt;&lt;/code&gt;的Set表现&lt;code class=&quot;prettyprint&quot;&gt;Table&amp;lt;R, C, V&amp;gt;&lt;/code&gt;.
&lt;code class=&quot;prettyprint&quot;&gt;Cell&lt;/code&gt;类似于&lt;code class=&quot;prettyprint&quot;&gt;Map.Entry&lt;/code&gt;,但它是用行和列两个键区分的&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; values()&lt;/code&gt;: 返回V的集合&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;table接口的实现类&quot;&gt;Table接口的实现类&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实现类&lt;/th&gt;
&lt;th&gt;本质&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashBasedTable&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;prettyprint&quot;&gt;HashMap&amp;lt;R, HashMap&amp;lt;C, V&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeBasedTable&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;prettyprint&quot;&gt;TreeMap&amp;lt;R, TreeMap&amp;lt;C,V&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayTable&lt;/td&gt;
&lt;td&gt;二维数组&lt;/td&gt;
&lt;td&gt;要求在构造时就指定行和列的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImmutableTable&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;prettyprint&quot;&gt;ImmutableMap&amp;lt;R, ImmutableMap&amp;lt;C, V&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;这是个抽象类,对稀疏或密集的数据集都有优化&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;hr&gt;

&lt;h2 id=&quot;rangeset&quot;&gt;RangeSet&lt;/h2&gt;

&lt;p&gt;RangeSet描述了一组不相连的、非空的区间。当把一个区间添加到可变的RangeSet时，所有相连的区间会被合并，空区间会被忽略  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;RangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeRangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// {[1,10]}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closedOpen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 不相连区间:{[1,10], [11,15)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closedOpen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 相连区间; {[1,10], [11,20)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openClosed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 空区间; {[1,10], [11,20)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 分割[1, 10]; {[1,5], [10,10], [11,20)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要合并&lt;code class=&quot;prettyprint&quot;&gt;Range.closed(1, 10)&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;Range.closedOpen(11,15)&lt;/code&gt;这样的区间,
你需要首先用&lt;code class=&quot;prettyprint&quot;&gt;Range.canonical(DiscreteDomain)&lt;/code&gt;对区间进行预处理，例如&lt;code class=&quot;prettyprint&quot;&gt;DiscreteDomain.integers()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;RangeSet不支持GWT，也不支持JDK5和更早版本；因为，RangeSet需要充分利用JDK6中NavigableMap的特性&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;rangemap&quot;&gt;RangeMap&lt;/h2&gt;

&lt;p&gt;RangeMap描述了不相交的、非空的区间到特定值的映射。
和RangeSet不同，RangeMap不会合并相邻的映射，即便相邻的区间映射到相同的值。例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;RangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rangeMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeRangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// {[1,10] =&amp;gt; &amp;quot;foo&amp;quot;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// {[1,3] =&amp;gt; &amp;quot;foo&amp;quot;, (3,6) =&amp;gt; &amp;quot;bar&amp;quot;, [6,10] =&amp;gt; &amp;quot;foo&amp;quot;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// {[1,3] =&amp;gt; &amp;quot;foo&amp;quot;, (3,6) =&amp;gt; &amp;quot;bar&amp;quot;, [6,10] =&amp;gt; &amp;quot;foo&amp;quot;, (10,20) =&amp;gt; &amp;quot;foo&amp;quot;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rangeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// {[1,3] =&amp;gt; &amp;quot;foo&amp;quot;, (3,5) =&amp;gt; &amp;quot;bar&amp;quot;, (11,20) =&amp;gt; &amp;quot;foo&amp;quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Wed, 18 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-18-Guava%E6%96%B0%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-18-Guava%E6%96%B0%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Guava之Ordering</title>
        <description>&lt;p&gt;guava的collection包里有个&lt;code class=&quot;prettyprint&quot;&gt;Ordering&lt;/code&gt;抽象类实现了&lt;code class=&quot;prettyprint&quot;&gt;java.util.Comparator&lt;/code&gt;接口&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;Comparator&lt;/code&gt;就俩方法&lt;code class=&quot;prettyprint&quot;&gt;int compare(T o1, T o2);&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;boolean equals(Object obj);&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;prettyprint&quot;&gt;Ordering&lt;/code&gt;提供了更多的方法来完成集合排序的功能&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;静态方法&quot;&gt;静态方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;C&amp;gt; natural()&lt;/code&gt;: 返回自然顺序的比较器, 如数字按大小，日期按先后&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;T&amp;gt; from(Comparator&amp;lt;T&amp;gt; comparator)&lt;/code&gt;: 把给定的Comparator转化为排序器&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;Object&amp;gt; usingToString()&lt;/code&gt;: 按对象的字符串形式做字典排序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;T&amp;gt; compound(Iterable comparators)&lt;/code&gt;: 合成多个比较器, 类似于实例方法的那个&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;Object&amp;gt; allEqual()&lt;/code&gt;: 返回一个认为全都相等的比较器, 相当于没有排序.
它的意义在于返回一个比较器, 这样就可以使用一些实例方法了, 从而进行链式比较,
比如:&lt;code class=&quot;prettyprint&quot;&gt;Ordering.allEqual().nullsLast().sortedCopy(asList(t, null, e, s, null, t, null))}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;实例方法:链式调用&quot;&gt;实例方法:链式调用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;S&amp;gt; reverse()&lt;/code&gt;: 返回反序比较器&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;S&amp;gt; nullsFirst()&lt;/code&gt;: 使用当前排序器, 但额外把&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;放到最前面&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;S&amp;gt; nullsLast()&lt;/code&gt;: 使用当前排序器, 但额外把&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;放到最后面&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;U&amp;gt; compound(Comparator second)&lt;/code&gt;: 合成比较器, 先按原来排序，然后按second排序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Ordering&amp;lt;F&amp;gt; onResultOf(Function&amp;lt;F, T&amp;gt; function)&lt;/code&gt;: 对集合中元素调用Function，再按返回值用当前排序器排序.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看下面这个链式调用的例子, 应该从后往前读, 先调用apply方法获取Foo的name值, 在把null放前面, 再对剩下的按照name的自然顺序进行排序&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Ordering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ordering&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ordering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;natural&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nullsFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onResultOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2 id=&quot;实例方法:操作集合元素的方法&quot;&gt;实例方法:操作集合元素的方法&lt;/h2&gt;

&lt;p&gt;注:后面说的大小是指排序的前后&lt;/p&gt;

&lt;h3 id=&quot;min():-返回最小的那个元素,-重载方法有&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;min()&lt;/code&gt;: 返回最小的那个元素, 重载方法有&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E min(Iterator&amp;lt;E&amp;gt; iterator)&lt;/code&gt;: 迭代器空则抛出&lt;code class=&quot;prettyprint&quot;&gt;NoSuchElementException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E min(Iterable&amp;lt;E&amp;gt; iterable)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E min(E a, E b)&lt;/code&gt;: 相等则返回第一个&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E min(E a,  E b, E c, E... rest)&lt;/code&gt;: 多个最小则返回第一个最小的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;max():-返回最大的那个元素,-重载方法有&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;max()&lt;/code&gt;: 返回最大的那个元素, 重载方法有&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E max(Iterator&amp;lt;E&amp;gt; iterator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E max(Iterable&amp;lt;E&amp;gt; iterable)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E max(E a, E b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;E max(E a,  E b, E c, E... rest)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;leastof():-返回最小的k个元素的列表,-不足k个则都返回&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;leastOf()&lt;/code&gt;: 返回最小的k个元素的列表, 不足k个则都返回&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;E&amp;gt; leastOf(Iterable&amp;lt;E&amp;gt; iterable, int k)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;E&amp;gt; leastOf(Iterator&amp;lt;E&amp;gt; elements, int k)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;greatestof():-返回最大的k个元素的列表,-不足k个则都返回&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;greatestOf()&lt;/code&gt;: 返回最大的k个元素的列表, 不足k个则都返回&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;E&amp;gt; greatestOf(Iterable&amp;lt;E&amp;gt; iterable, int k)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;E&amp;gt; greatestOf(Iterator&amp;lt;E&amp;gt; elements, int k)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;判断是否已经按照排序器排过序&quot;&gt;判断是否已经按照排序器排过序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean isOrdered(Iterable iterable)&lt;/code&gt;: 允许有排序值相等的元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean isStrictlyOrdered(Iterable iterable)&lt;/code&gt;: 严格递增, 不允许有相等的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;返回排序好的list&quot;&gt;返回排序好的list&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;List&amp;lt;E&amp;gt; sortedCopy(Iterable&amp;lt;E&amp;gt; elements)&lt;/code&gt;: 返回可变的已经排好序的list&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;ImmutableList&amp;lt;E&amp;gt; immutableSortedCopy(Iterable&amp;lt;E&amp;gt; elements)&lt;/code&gt;: 返回不可变的已经排好序的list&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Mon, 16 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-16-Guava%E4%B9%8BOrdering.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-16-Guava%E4%B9%8BOrdering.html</guid>
        
        <category>Guava</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Collections工具类</title>
        <description>&lt;p&gt;JDK的Collections类中提供了大量对Collection和Map的操作,网上资料整理记录下来&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;排序操作(主要对list)&quot;&gt;排序操作(主要对List)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void sort(List list)&lt;/code&gt;: 对List里的元素根据自然升序排序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void sort(List list, Comparator c)&lt;/code&gt;: 自定义比较器排序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void reverse(List list)&lt;/code&gt;: 反转指定List集合中元素的顺序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void shuffle(List list)&lt;/code&gt;: 打乱List中元素的顺序(重新洗牌)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void swap(List list, int i, int j)&lt;/code&gt;: 交换list中的两个元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void swap(Object[] arr, int i, int j)&lt;/code&gt;: 交换数组中的两个元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void rotate(List list, int distance)&lt;/code&gt;: 所有元素循环右移distance位, distance=size则相当于没变&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;查找和替换(主要对collection接口)&quot;&gt;查找和替换(主要对Collection接口)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int binarySearch(List list, T key)&lt;/code&gt;: 二分搜索法, 返回对象在List中的索引, 前提是集合已经排序&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void fill(List list, T obj)&lt;/code&gt;: 填充对象&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean replaceAll(List list, T oldVal, T newVal)&lt;/code&gt;: 替换, 返回是否含有要替换的元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;T min(Collection coll)&lt;/code&gt;: 返回最小元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;T min(Collection coll, Comparator comp)&lt;/code&gt;: 根据自定义比较器，返回最小元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;T max(Collection coll)&lt;/code&gt;: 返回最大元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;T max(Collection coll, Comparator comp)&lt;/code&gt;: 根据自定义比较器，返回最大元素&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int frequency(Collection c, Object o)&lt;/code&gt;: 返回指定对象在集合中出现的次数&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;其他操作&quot;&gt;其他操作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean addAll(Collection c, T... elements)&lt;/code&gt;: 把elements添加到集合里&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Comparator reverseOrder()&lt;/code&gt;: 返回自然顺序的反序比较器&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Comparator reverseOrder(Comparator cmp)&lt;/code&gt;: 返回cmp的逆序比较器, 若cmp为null则等同于&lt;code class=&quot;prettyprint&quot;&gt;reverseOrder()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Fri, 13 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-13-Collections%E5%B7%A5%E5%85%B7%E7%B1%BB.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-13-Collections%E5%B7%A5%E5%85%B7%E7%B1%BB.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Map整理</title>
        <description>&lt;p&gt;整理了下Java中Map的结构画了个图, 虚线表示接口, 实线表示类&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;map继承关系图&quot;&gt;Map继承关系图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/map.png&quot; alt=&quot;Map继承关系图&quot; title=&quot;Map结构图&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;map基本操作&quot;&gt;Map基本操作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;int size()&lt;/code&gt;: 返回map大小&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean isEmpty()&lt;/code&gt;: 是否为空Map&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsKey(Object key)&lt;/code&gt;: 是否包含key&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;boolean containsValue(Object value)&lt;/code&gt;: 是否包含value&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;V get(Object key)&lt;/code&gt;: 返回key对应的value, 没有则返回&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;V put(K key, V value)&lt;/code&gt;: key和value都可为null, key重复则替换旧的value&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void putAll(Map&amp;lt;? extends K, ? extends V&amp;gt; m)&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;V remove(Object key)&lt;/code&gt;: 移除并返回, 若不包含key返回null&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void clear()&lt;/code&gt;: 清空map&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;K&amp;gt; keySet()&lt;/code&gt;: 返回key的集合&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Collection&amp;lt;V&amp;gt; values()&lt;/code&gt;: 返回value的集合&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Set&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; entrySet()&lt;/code&gt;: 返回Entry集合&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;hashmap与hashtable&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;HashMap&lt;/code&gt;与&lt;code class=&quot;prettyprint&quot;&gt;HashTable&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hashtable是线程安全的，而HashMap不是线程安全的&lt;/li&gt;
&lt;li&gt;Hashtable不允许null作为key和value，而HashMap则可以使用null作为key和value&lt;/li&gt;
&lt;li&gt;Hashtable很古老, 从JDK1.0就有了, 不建议使用&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;hashmap与identityhashmap&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;HashMap&lt;/code&gt;与&lt;code class=&quot;prettyprint&quot;&gt;IdentityHashMap&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;IdentityHashMap&lt;/code&gt;认为两个key相等: 两个key严格相等(&lt;code class=&quot;prettyprint&quot;&gt;key1 == key2&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;HashMap&lt;/code&gt;则认为两个key相等: &lt;code class=&quot;prettyprint&quot;&gt;key1.equals(key2)&lt;/code&gt;且&lt;code class=&quot;prettyprint&quot;&gt;hashCode&lt;/code&gt;相同&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;linkedhashmap&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;LinkedHashMap&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;LinkedHashMap&lt;/code&gt;可以记住key-value对的添加时的顺序&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;sortedmap接口和treemap&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;SortedMap&lt;/code&gt;接口和&lt;code class=&quot;prettyprint&quot;&gt;TreeMap&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;内置比较器(&lt;code class=&quot;prettyprint&quot;&gt;Comparator&lt;/code&gt;),可比较前后顺序, &lt;code class=&quot;prettyprint&quot;&gt;TreeMap&lt;/code&gt;默认按照自然顺序排序, 不允许null作为key&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;enummap&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;EnumMap&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;EnumMap&lt;/code&gt;只接受枚举类作为key, 不允许null作为key&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;properties&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;Properties&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;Properties&lt;/code&gt;继承&lt;code class=&quot;prettyprint&quot;&gt;HashTable&lt;/code&gt;, 还有几个其他常用方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String getProperty(String key)&lt;/code&gt;: 获取指定key对应的value值&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;String getProperty(String key, String defaultValue)&lt;/code&gt;: 有默认值&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Object setProperty(String key, String value)&lt;/code&gt;: 调用&lt;code class=&quot;prettyprint&quot;&gt;Hashtable&lt;/code&gt;的put方法.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void load(InputStream inStream)&lt;/code&gt;: 从属性文件加载key-value对&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;void store(OutputStream out, String comments)&lt;/code&gt;: 将当前的所有key-value对输出到指定属性文件,小心乱码&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;loadFromXML(InputStream in)&lt;/code&gt;: 从XML中加载配置&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;storeToXML(OutputStream os, String comment)&lt;/code&gt;: 写到XML文件中&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;storeToXML(OutputStream os, String comment, String encoding)&lt;/code&gt;: 写到XML中, 可以指定编码&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;map的选择&quot;&gt;Map的选择&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;若要保留插入时的顺序, 可用&lt;code class=&quot;prettyprint&quot;&gt;LinkedHashMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若要求key完全匹配(同一对象)，可用&lt;code class=&quot;prettyprint&quot;&gt;IdentityHashMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若要排序,可用&lt;code class=&quot;prettyprint&quot;&gt;TreeMap&lt;/code&gt;, 它在底层采用红黑树来管理key-value对&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;关于null&quot;&gt;关于&lt;code class=&quot;prettyprint&quot;&gt;null&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;Hashtable&lt;/code&gt;的key、value均不能为null&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;TreeMap&lt;/code&gt;与&lt;code class=&quot;prettyprint&quot;&gt;EnumMap&lt;/code&gt;不允许key为null&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;HashMap&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;IdentityHashMap&lt;/code&gt;key可以为null, 但不建议这样做&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Thu, 12 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Map%E6%95%B4%E7%90%86.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Map%E6%95%B4%E7%90%86.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Collection的toArray方法</title>
        <description>&lt;p&gt;Java中Collection的有两个toArray方法:&lt;code class=&quot;prettyprint&quot;&gt;Object[] toArray()&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;T&amp;gt; T[] toArray(T[] a)&lt;/code&gt;&lt;br&gt;
后面那个范型方法略难懂, 整理时发现些比较屌的地方,记录下来&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;T&amp;gt; T[] toArray(T[] a)&lt;/code&gt;方法在抽象类&lt;code class=&quot;prettyprint&quot;&gt;AbstractCollection&lt;/code&gt;中有个实现&lt;br&gt;
该方法也是把集合转成数组, 你可以指定转成什么类型的数组,若转换的类型与集合中元素类型不一样,会抛&lt;code class=&quot;prettyprint&quot;&gt;ArrayStoreException&lt;/code&gt;.&lt;br&gt;
关于参数的写法上, 这个数组a可以是空的, 也可以不空, 会有不同的效果, 看下面代码:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 先创建一个集合&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 可以这么写, 长度为0, 只表示转成什么类型, 在内部还会创建一个长度为5的数组&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 也可以这么写, 长度是集合的size, 在内部会把集合里的元素放到这个传参时创建的数组&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()]);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 还可以这么写, 长度大于集合的size, 在内部会把集合里的元素放到这个传参时创建的数组, 后面多出来的3(8-5)个位置填充null&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 无论哪种方式, 如果传入的类型与即集合里元素的类型不匹配, 就会抛出ArrayStoreException&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;仔细看下JDK1.7的源码, 发现也很腹黑:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 仔细想了下, 貌似这俩else分支根本不会被执行&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                             &lt;span class=&quot;c1&quot;&gt;// 但人家可是JDK里的源码呀, 不可能出错吧!&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arraycopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finishToArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码里注释中提的问题我想了好久, 我考虑的情况都是正常情况, 在并发环境中, 集合里的元素有可能会被其他线程remove掉,
这就造成了iterator迭代出的元素个数小于size的情况, 注释里的那俩else就会被执行到了!&lt;br&gt;
 JDK源码写的还真是考虑周到啊...&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Thu, 12 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Collection%E7%9A%84toArray%E6%96%B9%E6%B3%95.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-12-Collection%E7%9A%84toArray%E6%96%B9%E6%B3%95.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
  </channel>
</rss>
